# Fly.io Production Dockerfile - Complete Production Setup
# 
# WORKFLOW:
# 1. ./build-cross.sh --profile release         # Build x86_64 binaries (7 minutes)  
# 2. docker build -f Dockerfile.fly -t fechatter-fly .  # Fast packaging
# 3. flyctl deploy --local-only                 # Deploy using local image

FROM alpine:3.19

WORKDIR /app

# Install runtime dependencies + PostgreSQL client for migrations
RUN apk add --no-cache \
    ca-certificates \
    openssl \
    libgcc \
    curl \
    tini \
    tzdata \
    supervisor \
    postgresql-client \
    bash && \
    rm -rf /var/cache/apk/*

# Copy pre-compiled x86_64 binaries from target/main/release
COPY target/main/release/fechatter_server /usr/local/bin/fechatter_server
COPY target/main/release/fechatter_gateway /usr/local/bin/fechatter_gateway  
COPY target/main/release/notify_server /usr/local/bin/notify_server
COPY target/main/release/analytics_server /usr/local/bin/analytics_server
COPY target/main/release/bot_server /usr/local/bin/bot_server

# Copy essential runtime files
COPY migrations /app/migrations
COPY fechatter_protos/storage/analytics.sql /app/analytics.sql

# Copy fixtures directory (contains PEM files required for auth)
COPY fechatter_core/fixtures /app/fechatter_core/fixtures
COPY fechatter_server/fixtures /app/fechatter_server/fixtures

# Copy production configuration files to expected locations
# Use environment variable substitution configs for production
COPY fly/config/chat-production.yml /app/fechatter_server/chat.yml
COPY fly/config/analytics-production.yml /app/analytics_server/analytics.yml
COPY fly/config/notify-production.yml /app/notify_server/notify.yml
COPY fly/config/bot-production.yml /app/bot_server/bot.yml
COPY fly/config/gateway-production.yml /app/fechatter_gateway/gateway.yml

# Copy to alternative paths for fallback discovery
COPY fly/config/analytics-production.yml /app/config/analytics.yml
COPY fly/config/gateway-production.yml /app/config/gateway.yml

# Copy startup scripts
COPY scripts/fly-start.sh /app/fly-start.sh
COPY scripts/wait-for-services.sh /app/wait-for-services.sh

# Copy supervisor configuration
COPY fly/supervisor-production.conf /etc/supervisor/conf.d/fechatter.conf

# Set executable permissions
RUN chmod +x /usr/local/bin/fechatter_server && \
    chmod +x /usr/local/bin/fechatter_gateway && \
    chmod +x /usr/local/bin/notify_server && \
    chmod +x /usr/local/bin/analytics_server && \
    chmod +x /usr/local/bin/bot_server && \
    chmod +x /app/fly-start.sh && \
    chmod +x /app/wait-for-services.sh

# Create directories and user (matching Dockerfile.local structure)
RUN adduser -D -s /bin/sh -u 1001 appuser && \
    mkdir -p /app/uploads /app/logs /app/config /app/data /data/uploads /data/cache && \
    chown -R appuser:appuser /app && \
    chmod 755 /app && \
    chmod 750 /app/config

# Create supervisor logs directory  
RUN mkdir -p /var/log/supervisor /var/log/fechatter && \
    chown -R appuser:appuser /var/log/supervisor /var/log/fechatter

# Use tini as PID 1 for proper signal handling
ENTRYPOINT ["/sbin/tini", "--"]

# Expose all service ports
EXPOSE 8080 6688 6687 6686 6690

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Start with startup script that runs supervisor
USER root
CMD ["/app/fly-start.sh"] 