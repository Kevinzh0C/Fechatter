# Fechatter Gateway - High Availability Configuration
# This configuration includes all error recovery and resilience features

server:
  listen_addr: "0.0.0.0:8080"
  worker_threads: 8
  max_connections: 20000
  keepalive_timeout: 120
  request_timeout: 60
  
  # Connection pool settings for better resource management
  connection_pool:
    max_idle_per_host: 100
    idle_timeout: 90
    
  # Buffer sizes for better performance
  buffer_size: 65536
  max_header_size: 16384

# Upstream services with comprehensive health checks
upstreams:
  fechatter-server:
    servers:
    - "fechatter-server-1:6688"
    - "fechatter-server-2:6688"
    - "fechatter-server-3:6688"
    health_check:
      interval: 10
      timeout: 3
      path: "/health"
      expected_status: [200]
      healthy_threshold: 2
      unhealthy_threshold: 2
      # Jitter to prevent thundering herd
      jitter: 2
    load_balancing: RoundRobin
    circuit_breaker:
      failure_threshold: 5
      success_threshold: 2
      timeout: 30
      half_open_max_requests: 3
    retry_policy:
      max_attempts: 3
      backoff_ms: 100
      retry_on_status: [502, 503, 504]
      retry_on_error: true
    connection_pool:
      max_connections: 200
      min_connections: 10
      connection_timeout: 5

  notify-server:
    servers:
    - "notify-server-1:6687"
    - "notify-server-2:6687"
    health_check:
      interval: 15
      timeout: 5
      path: "/sse/health"
      expected_status: [200]
      healthy_threshold: 2
      unhealthy_threshold: 3
    load_balancing: LeastConnections
    # SSE connections need longer timeouts
    connection_timeout: 300
    request_timeout: 300

  analytics-server:
    servers:
    - "analytics-server:6690"
    health_check:
      interval: 30
      timeout: 5
      path: "/health"
      expected_status: [200]
      healthy_threshold: 2
      unhealthy_threshold: 3
    load_balancing: RoundRobin
    # Analytics can handle batch retries
    retry_policy:
      max_attempts: 5
      backoff_ms: 200
      exponential_backoff: true

  search-service:
    servers:
    - "meilisearch:7700"
    health_check:
      interval: 30
      timeout: 5
      path: "/health"
      expected_status: [200]
      healthy_threshold: 2
      unhealthy_threshold: 3
    load_balancing: RoundRobin
    # Search queries can be retried safely
    retry_policy:
      max_attempts: 3
      backoff_ms: 50

# Routing configuration with fallbacks
routes:
# Health check endpoint (always available)
- path: "/health"
  methods: ["GET"]
  upstream: "fechatter-server"
  fallback_upstream: "notify-server"  # Fallback to another service
  cors_enabled: false
  cache_enabled: false
  timeout_override: 5

# API routes with automatic failover
- path: "/api/"
  methods: ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"]
  upstream: "fechatter-server"
  cors_enabled: true
  cors_origins:
  - "http://localhost:3000"
  - "https://app.fechatter.com"
  rate_limit:
    requests_per_minute: 1000
    burst: 50
  retry_on_error: true
  circuit_breaker_enabled: true

# SSE routes with special handling
- path: "/events"
  methods: ["GET", "OPTIONS"]
  upstream: "notify-server"
  cors_enabled: true
  # SSE needs special timeout handling
  timeout_override: 0  # No timeout for SSE
  buffer_response: false
  retry_on_error: false  # Don't retry SSE connections

# Monitoring and observability
monitoring:
  metrics:
    enabled: true
    port: 9090
    path: "/metrics"
    
  tracing:
    enabled: true
    sampling_rate: 0.1
    endpoint: "http://jaeger:14268/api/traces"
    
  logging:
    level: "info"
    format: "json"
    # Separate error log for better monitoring
    error_log: "/var/log/fechatter/gateway-error.log"
    access_log: "/var/log/fechatter/gateway-access.log"

# Advanced error recovery features
error_recovery:
  # Automatic request hedging for critical paths
  hedging:
    enabled: true
    paths:
    - "/api/signin"
    - "/api/refresh"
    delay_ms: 50
    
  # Request deduplication to prevent duplicate processing
  deduplication:
    enabled: true
    window_ms: 1000
    
  # Graceful degradation
  degradation:
    enabled: true
    # Return cached responses when backend is down
    serve_stale_on_error: true
    stale_max_age: 300
    
  # Request queuing during overload
  queue:
    enabled: true
    max_size: 10000
    timeout_ms: 30000

# Security hardening
security:
  # DDoS protection
  rate_limiting:
    enabled: true
    # Global rate limit
    global:
      requests_per_second: 10000
      burst: 1000
    # Per-IP rate limiting
    per_ip:
      requests_per_minute: 1000
      burst: 100
      ban_duration: 300  # 5 minutes
      
  # Request validation
  validation:
    max_body_size: 10485760  # 10MB
    max_header_size: 8192
    max_uri_length: 2048
    
  # Security headers
  headers:
    X-Frame-Options: "DENY"
    X-Content-Type-Options: "nosniff"
    X-XSS-Protection: "1; mode=block"
    Strict-Transport-Security: "max-age=31536000; includeSubDomains"

# Cache configuration for performance
cache:
  enabled: true
  # Use Redis for distributed caching
  backend:
    type: "redis"
    redis:
      url: "redis://redis-cluster:6379"
      pool_size: 50
      # Redis cluster support
      cluster_mode: true
      # Automatic failover
      sentinel:
        master_name: "mymaster"
        sentinels:
        - "sentinel1:26379"
        - "sentinel2:26379"
        - "sentinel3:26379"
  
  # Cache rules
  rules:
  - paths: ["/health", "/metrics"]
    ttl: 10
    
  - paths: ["/api/workspace/list"]
    ttl: 60
    vary_headers: ["Authorization"]
    
  - paths: ["/api/search"]
    ttl: 300
    vary_headers: ["Authorization", "X-Workspace-Id"]
    vary_params: ["q", "type", "limit"]

# High availability settings
high_availability:
  # Enable leader election for distributed deployments
  leader_election:
    enabled: true
    backend: "etcd"
    etcd_endpoints:
    - "http://etcd1:2379"
    - "http://etcd2:2379"
    - "http://etcd3:2379"
    lease_duration: 15
    renew_deadline: 10
    
  # Health check for the gateway itself
  self_health_check:
    enabled: true
    interval: 5
    failure_threshold: 3
    # Automatically restart if unhealthy
    auto_restart: true
    
  # Graceful shutdown
  shutdown:
    timeout: 30
    drain_timeout: 15
    # Notify load balancer before shutdown
    notification_endpoint: "http://lb-controller/drain"