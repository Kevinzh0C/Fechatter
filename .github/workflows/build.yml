on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  
permissions:
  contents: write

jobs:
  build-rust:
    strategy:
      matrix:
        include:
          - os: "ubuntu-latest"
            rust-version: "stable"
          - os: "ubuntu-latest"
            rust-version: "nightly"
    runs-on: ${{ matrix.os }}
    env:
      MAKE_FEATURES_FLAG: "--all-features"
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
    defaults:
      run:
        shell: bash
    
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust-version }}
          components: rustfmt, clippy
 
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov
      
      - name: Install nextest
        uses: taiki-e/install-action@v2
        with:
          tool: nextest
      
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      
      - name: Install sqlx-cli
        uses: taiki-e/install-action@v2
        with:
          tool: sqlx-cli
      
      - name: Create database
        run: sqlx database create
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
      
      - name: Run database migrations
        run: |
          echo "Current directory: $(pwd)"
          find . -name "migrations" -type d || echo "No migrations directory found"
          sqlx migrate run --source ./migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
      
      - name: Check code format
        run: cargo fmt -- --check
      
      - name: Check the package for errors
        run: cargo check --all
      
      - name: Lint rust source
        run: cargo clippy --all-targets --all-features --tests --benches -- -D warnings
        continue-on-error: true
          
      - name: Execute rust tests
        run: cargo nextest run --all-features
      
      - name: Generate a changelog
        uses: orhun/git-cliff-action@v2
        id: git-cliff
        if: startsWith(github.ref, 'refs/tags/')
        with:
          config: cliff.toml
          args: -vv --latest --strip header 
        env:
          OUTPUT: CHANGES.md
      
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with: 
          body: ${{ steps.git-cliff.outputs.content }}
   
