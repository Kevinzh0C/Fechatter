name: Multi-Environment Deployment

on:
  push:
    branches: [ main, staging, demo ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: fechatter

jobs:
  # 构建阶段 - 根据目标环境选择Dockerfile
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: local
            dockerfile: docker/Dockerfile.local
            platforms: linux/amd64
          - target: aws
            dockerfile: docker/Dockerfile.aws
            platforms: linux/amd64,linux/arm64
          - target: fly
            dockerfile: docker/Dockerfile.fly
            platforms: linux/amd64
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/fechatter-${{ matrix.target }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=commit-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ${{ matrix.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: ${{ matrix.platforms }}
        build-args: |
          APP_NAME=fechatter_server

  # 部署到 Fly.io (HR演示环境)
  deploy-fly-demo:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/demo' || contains(github.event.head_commit.message, '[deploy-demo]')
    environment: demo
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Fly CLI
      uses: superfly/flyctl-actions/setup-flyctl@master

    - name: Deploy to Fly.io
      run: |
        echo "🚀 Deploying HR Demo to Fly.io..."
        flyctl deploy --config fly.toml
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

    - name: Get Fly.io App URL
      run: |
        APP_URL=$(flyctl info --config fly.toml | grep "URL" | awk '{print $2}')
        echo "✅ Demo deployed to: $APP_URL"
        echo "📱 HR Demo URL: $APP_URL" >> $GITHUB_STEP_SUMMARY

  # 部署到 AWS EKS (生产环境)
  deploy-aws-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Install kubectl
      uses: azure/setup-kubectl@v4

    - name: Deploy to AWS EKS
      run: |
        echo "🚀 Deploying to AWS EKS Japan..."
        ./scripts/deploy-japan.sh
      env:
        AWS_REGION: ap-northeast-1
        CLUSTER_NAME: fechatter-japan-prod
        IMAGE_TAG: ${{ github.sha }}

  # 部署到测试环境
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Deploy to staging
      run: |
        echo "🧪 Deploying to staging environment..."
        # 使用轻量级配置部署到测试环境
        kubectl apply -f k8s/staging/ -n fechatter-staging

  # 多云部署 (特殊情况)
  deploy-multicloud:
    runs-on: ubuntu-latest
    needs: build
    if: contains(github.event.head_commit.message, '[deploy-multicloud]')
    
    strategy:
      matrix:
        cloud: [aws, fly]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy to ${{ matrix.cloud }}
      run: |
        case ${{ matrix.cloud }} in
          aws)
            echo "☁️ Deploying to AWS..."
            ./scripts/deploy-japan.sh
            ;;
          fly)
            echo "✈️ Deploying to Fly.io..."
            flyctl deploy --config fly.toml
            ;;
        esac
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # 通知部署结果
  notify-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-fly-demo, deploy-aws-production, deploy-staging]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          🚀 Fechatter deployment completed!
          
          Demo (Fly.io): ${{ needs.deploy-fly-demo.result }}
          Production (AWS): ${{ needs.deploy-aws-production.result }}
          Staging: ${{ needs.deploy-staging.result }}
          
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref_name }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}