# 统一多架构构建 Dockerfile
# 基于 messense/rust-musl-cross 支持 x86_64 + ARM64

ARG TARGETARCH
FROM messense/rust-musl-cross:${TARGETARCH:-x86_64}-musl as builder

WORKDIR /app

# 设置环境变量 (支持多架构)
ENV SQLX_OFFLINE=true
ENV ENVIRONMENT=${ENVIRONMENT:-development}

# 根据架构设置编译器
RUN if [ "$TARGETARCH" = "arm64" ]; then \
        export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-musl-gcc && \
        export CC_aarch64_unknown_linux_musl=aarch64-linux-musl-gcc && \
        export CXX_aarch64_unknown_linux_musl=aarch64-linux-musl-g++; \
    fi

# 安装 protoc (统一)
RUN apt-get update && apt-get install -y protobuf-compiler && rm -rf /var/lib/apt/lists/*

# 复制工作空间配置
COPY Cargo.toml Cargo.lock ./

# 复制所有成员项目的 Cargo.toml
COPY fechatter_core/Cargo.toml ./fechatter_core/
COPY fechatter_server/Cargo.toml ./fechatter_server/
COPY notify_server/Cargo.toml ./notify_server/
COPY analytics_server/Cargo.toml ./analytics_server/
COPY bot_server/Cargo.toml ./bot_server/
COPY fechatter_macro/Cargo.toml ./fechatter_macro/
COPY fechatter_tests/Cargo.toml ./fechatter_tests/
COPY ai_sdk/Cargo.toml ./ai_sdk/
COPY swiftide-pgvector/Cargo.toml ./swiftide-pgvector/
COPY fechatter_gateway/Cargo.toml ./fechatter_gateway/

# 创建虚拟源文件以缓存依赖
RUN mkdir -p fechatter_core/src fechatter_server/src notify_server/src analytics_server/src \
    bot_server/src fechatter_macro/src fechatter_tests/src ai_sdk/src swiftide-pgvector/src \
    fechatter_gateway/src && \
    echo "fn main() {}" > fechatter_server/src/main.rs && \
    echo "fn main() {}" > notify_server/src/main.rs && \
    echo "fn main() {}" > analytics_server/src/main.rs && \
    echo "fn main() {}" > bot_server/src/main.rs && \
    echo "fn main() {}" > fechatter_gateway/src/main.rs && \
    echo "pub fn dummy() {}" > fechatter_core/src/lib.rs && \
    echo "pub fn dummy() {}" > fechatter_macro/src/lib.rs && \
    echo "#[test] fn test() {}" > fechatter_tests/src/lib.rs && \
    echo "pub fn dummy() {}" > ai_sdk/src/lib.rs && \
    echo "pub fn dummy() {}" > swiftide-pgvector/src/lib.rs

# 设置目标架构
ARG TARGETARCH
RUN if [ "$TARGETARCH" = "arm64" ]; then \
        export RUST_TARGET="aarch64-unknown-linux-musl"; \
    else \
        export RUST_TARGET="x86_64-unknown-linux-musl"; \
    fi && \
    cargo build --release --target $RUST_TARGET

# 复制实际源代码
COPY . .

# 重新触发构建
RUN find . -name "main.rs" -exec touch {} \;

# 构建指定服务
ARG APP_NAME=fechatter_server
ARG TARGETARCH
RUN if [ "$TARGETARCH" = "arm64" ]; then \
        export RUST_TARGET="aarch64-unknown-linux-musl"; \
    else \
        export RUST_TARGET="x86_64-unknown-linux-musl"; \
    fi && \
    cargo build --release --target $RUST_TARGET --bin $APP_NAME

# 运行时阶段 - 统一使用 Alpine
FROM alpine:3.19

WORKDIR /app

# 安装运行时依赖 (最小化)
RUN apk add --no-cache \
    ca-certificates \
    postgresql-client \
    redis \
    curl \
    netcat-openbsd

# 复制二进制文件 (根据架构)
ARG APP_NAME
ARG TARGETARCH
RUN if [ "$TARGETARCH" = "arm64" ]; then \
        RUST_TARGET="aarch64-unknown-linux-musl"; \
    else \
        RUST_TARGET="x86_64-unknown-linux-musl"; \
    fi

COPY --from=builder /app/target/${RUST_TARGET}/release/$APP_NAME /app/$APP_NAME

# 复制脚本
COPY scripts/cloud-detect.sh /app/cloud-detect.sh
COPY scripts/wait-for-services*.sh /app/
RUN chmod +x /app/*.sh
RUN chmod +x /app/$APP_NAME

# 暴露端口
ARG APP_PORT=8080
EXPOSE $APP_PORT

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:$APP_PORT/health || exit 1

# 启动
CMD ["/bin/sh", "-c", "/app/cloud-detect.sh /app/$APP_NAME"]