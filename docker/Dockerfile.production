# 生产环境 Dockerfile - 支持多架构和过程宏
# 使用 rust 官方镜像，支持 proc-macro

FROM rust:1.82-bookworm as builder

WORKDIR /app

# 安装构建依赖
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    protobuf-compiler \
    build-essential \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# 设置环境变量
ENV SQLX_OFFLINE=true
ENV ENVIRONMENT=production

# 复制工作空间配置
COPY Cargo.toml Cargo.lock ./

# 复制所有成员项目的 Cargo.toml
COPY fechatter_core/Cargo.toml ./fechatter_core/
COPY fechatter_server/Cargo.toml ./fechatter_server/
COPY notify_server/Cargo.toml ./notify_server/
COPY analytics_server/Cargo.toml ./analytics_server/
COPY bot_server/Cargo.toml ./bot_server/
COPY fechatter_macro/Cargo.toml ./fechatter_macro/
COPY fechatter_tests/Cargo.toml ./fechatter_tests/
COPY ai_sdk/Cargo.toml ./ai_sdk/
COPY swiftide-pgvector/Cargo.toml ./swiftide-pgvector/
COPY fechatter_gateway/Cargo.toml ./fechatter_gateway/

# 创建虚拟源文件以缓存依赖
RUN mkdir -p fechatter_core/src fechatter_server/src notify_server/src analytics_server/src \
    bot_server/src fechatter_macro/src fechatter_tests/src ai_sdk/src swiftide-pgvector/src \
    fechatter_gateway/src && \
    echo "fn main() {}" > fechatter_server/src/main.rs && \
    echo "fn main() {}" > notify_server/src/main.rs && \
    echo "fn main() {}" > analytics_server/src/main.rs && \
    echo "fn main() {}" > bot_server/src/main.rs && \
    echo "fn main() {}" > fechatter_gateway/src/main.rs && \
    echo "pub fn dummy() {}" > fechatter_core/src/lib.rs && \
    echo "pub fn dummy() {}" > fechatter_macro/src/lib.rs && \
    echo "#[test] fn test() {}" > fechatter_tests/src/lib.rs && \
    echo "pub fn dummy() {}" > ai_sdk/src/lib.rs && \
    echo "pub fn dummy() {}" > swiftide-pgvector/src/lib.rs

# 构建依赖
RUN cargo build --release

# 复制实际源代码
COPY . .

# 重新触发构建
RUN find . -name "main.rs" -exec touch {} \;

# 构建指定服务
ARG APP_NAME=fechatter_server
RUN cargo build --release --bin $APP_NAME

# 运行时阶段 - 使用 distroless 减小镜像体积
FROM gcr.io/distroless/cc-debian12

WORKDIR /app

# 复制二进制文件
ARG APP_NAME
COPY --from=builder /app/target/release/$APP_NAME /app/$APP_NAME

# 复制必要的脚本和配置
COPY --from=builder /app/scripts/cloud-detect.sh /app/cloud-detect.sh
COPY --from=builder /app/scripts/wait-for-services*.sh /app/

# 暴露端口
ARG APP_PORT=8080
EXPOSE $APP_PORT

# 启动
ENTRYPOINT ["/app/$APP_NAME"]