# ============================================================================
# Local Development Dockerfile - Using Pre-compiled x86_64 Binaries
# ============================================================================
#
# ðŸŽ¯ PURPOSE: Package pre-compiled x86_64 binaries with flexible configuration
# ðŸ”§ STRATEGY: Use environment variables and volume mounts for config
# ðŸš€ WORKFLOW:
# 1. Manual compilation: see scripts/build-x86-complete.sh
# 2. docker compose -f docker-compose.local.yml build  (Fast packaging)
# 3. docker compose -f docker-compose.local.yml up     (Quick startup)
#
# ============================================================================

# ============================================================================
# Stage 1: Minimal Runtime Base for x86_64 Architecture
# ============================================================================
FROM alpine:3.20 AS runtime-base

# Install runtime dependencies (using latest versions for compatibility)
RUN apk add --no-cache \
    ca-certificates \
    openssl \
    libgcc \
    curl \
    tini \
    tzdata \
    supervisor \
    && rm -rf /var/cache/apk/*

# Create app user with proper security settings
RUN adduser -D -s /bin/sh -u 1001 appuser && \
    mkdir -p /app/uploads /app/logs /app/config /app/data && \
    chown -R appuser:appuser /app && \
    chmod 755 /app && \
    chmod 750 /app/config

# Use tini as PID 1 for proper signal handling in containers
ENTRYPOINT ["/sbin/tini", "--"]

# ============================================================================
# Stage 2: Individual Service Images (using pre-compiled x86_64 binaries)
# ============================================================================

# Fechatter Server - Uses configuration files from volume mount
FROM runtime-base AS fechatter-server
COPY --chown=appuser:appuser target/main/release/fechatter_server /usr/local/bin/fechatter_server
COPY --chown=appuser:appuser migrations /app/migrations

# Set permissions (binaries are pre-verified as x86_64)
RUN chmod +x /usr/local/bin/fechatter_server && \
    chown appuser:appuser /usr/local/bin/fechatter_server

USER appuser
WORKDIR /app
EXPOSE 6688

HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:6688/health || exit 1

CMD ["/usr/local/bin/fechatter_server"]

# Analytics Server - Uses configuration files from volume mount  
FROM runtime-base AS analytics-server
COPY --chown=appuser:appuser target/main/release/analytics_server /usr/local/bin/analytics_server

# Set permissions (binaries are pre-verified as x86_64)
RUN chmod +x /usr/local/bin/analytics_server && \
    chown appuser:appuser /usr/local/bin/analytics_server

USER appuser
WORKDIR /app
EXPOSE 6690

HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:6690/health || exit 1

CMD ["/usr/local/bin/analytics_server"]

# Notify Server - Uses configuration files from volume mount
FROM runtime-base AS notify-server
COPY --chown=appuser:appuser target/main/release/notify_server /usr/local/bin/notify_server

# Set permissions (binaries are pre-verified as x86_64)
RUN chmod +x /usr/local/bin/notify_server && \
    chown appuser:appuser /usr/local/bin/notify_server

USER appuser
WORKDIR /app
EXPOSE 6687

HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:6687/health || exit 1

CMD ["/usr/local/bin/notify_server"]

# Bot Server - Uses configuration files from volume mount
FROM runtime-base AS bot-server
COPY --chown=appuser:appuser target/main/release/bot_server /usr/local/bin/bot_server

# Set permissions (binaries are pre-verified as x86_64)
RUN chmod +x /usr/local/bin/bot_server && \
    chown appuser:appuser /usr/local/bin/bot_server

USER appuser
WORKDIR /app
EXPOSE 6686

HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:6686/health || exit 1

CMD ["/usr/local/bin/bot_server"]

# Gateway - Uses configuration files from volume mount
FROM runtime-base AS fechatter-gateway
COPY --chown=appuser:appuser target/main/release/fechatter_gateway /usr/local/bin/fechatter_gateway

# Set permissions (binaries are pre-verified as x86_64)
RUN chmod +x /usr/local/bin/fechatter_gateway && \
    chown appuser:appuser /usr/local/bin/fechatter_gateway

USER appuser
WORKDIR /app
EXPOSE 8080

HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

CMD ["/usr/local/bin/fechatter_gateway"]

# ============================================================================
# Stage 3: All-in-One Service with Supervisor
# ============================================================================

FROM runtime-base AS all-in-one

# Copy all pre-compiled binaries
COPY --chown=appuser:appuser target/main/release/fechatter_server /usr/local/bin/fechatter_server
COPY --chown=appuser:appuser target/main/release/analytics_server /usr/local/bin/analytics_server
COPY --chown=appuser:appuser target/main/release/notify_server /usr/local/bin/notify_server
COPY --chown=appuser:appuser target/main/release/bot_server /usr/local/bin/bot_server
COPY --chown=appuser:appuser target/main/release/fechatter_gateway /usr/local/bin/fechatter_gateway

# Copy database migrations
COPY --chown=appuser:appuser migrations /app/migrations

# Set permissions for all binaries
RUN chmod +x /usr/local/bin/fechatter_server && \
    chmod +x /usr/local/bin/analytics_server && \
    chmod +x /usr/local/bin/notify_server && \
    chmod +x /usr/local/bin/bot_server && \
    chmod +x /usr/local/bin/fechatter_gateway && \
    chown appuser:appuser /usr/local/bin/fechatter_* && \
    chown appuser:appuser /usr/local/bin/analytics_server && \
    chown appuser:appuser /usr/local/bin/notify_server && \
    chown appuser:appuser /usr/local/bin/bot_server

# Create supervisor configuration
COPY --chown=root:root docker/supervisor.conf /etc/supervisor/conf.d/supervisord.conf

# Create supervisor logs directory
RUN mkdir -p /var/log/supervisor && \
    chown -R appuser:appuser /var/log/supervisor

WORKDIR /app

# Expose all service ports
EXPOSE 6688 6690 6687 6686 8080

# Use supervisor to manage multiple services
USER root
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]

# ============================================================================
# Configuration Strategy:
# ============================================================================
#
# Services use the following configuration file discovery order:
#
# 1. fechatter-server:
#    - /app/fechatter_server/chat.yml (from volume mount)
#    - Falls back to other paths as defined in code
#
# 2. analytics-server:
#    - /app/analytics_server/analytics.yml (from volume mount)
#    - Falls back to other paths as defined in code
#
# 3. notify-server:
#    - /app/notify_server/notify.yml (from volume mount)
#    - Falls back to other paths as defined in code
#
# 4. bot-server:
#    - /app/bot_server/bot.yml (from volume mount)
#    - Falls back to other paths as defined in code
#
# 5. fechatter-gateway:
#    - /app/fechatter_gateway/gateway.yml (from volume mount)
#    - Falls back to other paths as defined in code
#
# This approach:
# âœ… Matches actual service configuration discovery logic
# âœ… No conflicting file names or paths
# âœ… Flexible for different environments via volume mounts
# âœ… Consistent with production deployment patterns
#
# ============================================================================