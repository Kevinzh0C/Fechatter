// This file is @generated by prost-build.
/// 用户信息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct User {
    #[prost(int64, tag = "1")]
    pub id: i64,
    #[prost(string, tag = "2")]
    pub fullname: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub email: ::prost::alloc::string::String,
    #[prost(enumeration = "UserStatus", tag = "4")]
    pub status: i32,
    #[prost(int64, tag = "5")]
    pub workspace_id: i64,
    #[prost(bool, tag = "6")]
    pub is_bot: bool,
    #[prost(message, optional, tag = "7")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "8")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
}
/// 工作空间
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Workspace {
    #[prost(int64, tag = "1")]
    pub id: i64,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub owner_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "5")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
}
/// 聊天信息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chat {
    #[prost(int64, tag = "1")]
    pub id: i64,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(enumeration = "ChatType", tag = "3")]
    pub r#type: i32,
    #[prost(int64, tag = "4")]
    pub workspace_id: i64,
    #[prost(int64, repeated, tag = "5")]
    pub members: ::prost::alloc::vec::Vec<i64>,
    #[prost(message, optional, tag = "6")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "7")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
}
/// 消息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Message {
    #[prost(int64, tag = "1")]
    pub id: i64,
    #[prost(int64, tag = "2")]
    pub chat_id: i64,
    #[prost(int64, tag = "3")]
    pub sender_id: i64,
    #[prost(string, tag = "4")]
    pub content: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "5")]
    pub files: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "6")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "7")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
}
/// 文件信息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileInfo {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub filename: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub content_type: ::prost::alloc::string::String,
    #[prost(int64, tag = "4")]
    pub size: i64,
    #[prost(string, tag = "5")]
    pub url: ::prost::alloc::string::String,
    #[prost(int64, tag = "6")]
    pub uploaded_by: i64,
    #[prost(message, optional, tag = "7")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
}
/// 分页参数
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pagination {
    #[prost(int32, tag = "1")]
    pub page: i32,
    #[prost(int32, tag = "2")]
    pub page_size: i32,
}
/// 分页响应
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PaginatedResponse {
    #[prost(int32, tag = "1")]
    pub total: i32,
    #[prost(int32, tag = "2")]
    pub page: i32,
    #[prost(int32, tag = "3")]
    pub page_size: i32,
    #[prost(int32, tag = "4")]
    pub total_pages: i32,
}
/// 错误信息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Error {
    #[prost(string, tag = "1")]
    pub code: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "3")]
    pub details: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// 用户状态
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum UserStatus {
    Unspecified = 0,
    Active = 1,
    Inactive = 2,
    Banned = 3,
}
impl UserStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "USER_STATUS_UNSPECIFIED",
            Self::Active => "USER_STATUS_ACTIVE",
            Self::Inactive => "USER_STATUS_INACTIVE",
            Self::Banned => "USER_STATUS_BANNED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "USER_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "USER_STATUS_ACTIVE" => Some(Self::Active),
            "USER_STATUS_INACTIVE" => Some(Self::Inactive),
            "USER_STATUS_BANNED" => Some(Self::Banned),
            _ => None,
        }
    }
}
/// 聊天类型
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ChatType {
    Unspecified = 0,
    /// 单人聊天
    Single = 1,
    /// 群组聊天
    Group = 2,
    /// 频道
    Channel = 3,
}
impl ChatType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "CHAT_TYPE_UNSPECIFIED",
            Self::Single => "CHAT_TYPE_SINGLE",
            Self::Group => "CHAT_TYPE_GROUP",
            Self::Channel => "CHAT_TYPE_CHANNEL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHAT_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "CHAT_TYPE_SINGLE" => Some(Self::Single),
            "CHAT_TYPE_GROUP" => Some(Self::Group),
            "CHAT_TYPE_CHANNEL" => Some(Self::Channel),
            _ => None,
        }
    }
}
