// This file is @generated by prost-build.
/// 分析事件
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnalyticsEvent {
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<EventContext>,
    #[prost(
        oneof = "analytics_event::EventType",
        tags = "10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25"
    )]
    pub event_type: ::core::option::Option<analytics_event::EventType>,
}
/// Nested message and enum types in `AnalyticsEvent`.
pub mod analytics_event {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum EventType {
        #[prost(message, tag = "10")]
        AppStart(super::AppStartEvent),
        #[prost(message, tag = "11")]
        AppExit(super::AppExitEvent),
        #[prost(message, tag = "12")]
        UserLogin(super::UserLoginEvent),
        #[prost(message, tag = "13")]
        UserLogout(super::UserLogoutEvent),
        #[prost(message, tag = "14")]
        UserRegister(super::UserRegisterEvent),
        #[prost(message, tag = "15")]
        ChatCreated(super::ChatCreatedEvent),
        #[prost(message, tag = "16")]
        MessageSent(super::MessageSentEvent),
        #[prost(message, tag = "17")]
        ChatJoined(super::ChatJoinedEvent),
        #[prost(message, tag = "18")]
        ChatLeft(super::ChatLeftEvent),
        #[prost(message, tag = "19")]
        Navigation(super::NavigationEvent),
        #[prost(message, tag = "20")]
        FileUploaded(super::FileUploadedEvent),
        #[prost(message, tag = "21")]
        FileDownloaded(super::FileDownloadedEvent),
        #[prost(message, tag = "22")]
        SearchPerformed(super::SearchPerformedEvent),
        #[prost(message, tag = "23")]
        NotificationReceived(super::NotificationReceivedEvent),
        #[prost(message, tag = "24")]
        ErrorOccurred(super::ErrorOccurredEvent),
        #[prost(message, tag = "25")]
        BotResponse(super::BotResponseEvent),
    }
}
/// 事件上下文
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventContext {
    #[prost(string, tag = "1")]
    pub client_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub session_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub app_version: ::prost::alloc::string::String,
    #[prost(int64, tag = "5")]
    pub client_ts: i64,
    #[prost(int64, tag = "6")]
    pub server_ts: i64,
    #[prost(string, tag = "7")]
    pub user_agent: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub ip: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "9")]
    pub system: ::core::option::Option<SystemInfo>,
    #[prost(message, optional, tag = "10")]
    pub geo: ::core::option::Option<GeoLocation>,
}
/// 系统信息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SystemInfo {
    #[prost(string, tag = "1")]
    pub os: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub arch: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub locale: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub timezone: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub browser: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub browser_version: ::prost::alloc::string::String,
}
/// 地理位置
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GeoLocation {
    #[prost(string, tag = "1")]
    pub country: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub region: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub city: ::prost::alloc::string::String,
}
/// 应用启动事件
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AppStartEvent {}
/// 应用退出事件
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AppExitEvent {
    #[prost(enumeration = "app_exit_event::ExitCode", tag = "1")]
    pub exit_code: i32,
}
/// Nested message and enum types in `AppExitEvent`.
pub mod app_exit_event {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ExitCode {
        Unspecified = 0,
        Success = 1,
        Error = 2,
        Crash = 3,
    }
    impl ExitCode {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "EXIT_CODE_UNSPECIFIED",
                Self::Success => "EXIT_CODE_SUCCESS",
                Self::Error => "EXIT_CODE_ERROR",
                Self::Crash => "EXIT_CODE_CRASH",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "EXIT_CODE_UNSPECIFIED" => Some(Self::Unspecified),
                "EXIT_CODE_SUCCESS" => Some(Self::Success),
                "EXIT_CODE_ERROR" => Some(Self::Error),
                "EXIT_CODE_CRASH" => Some(Self::Crash),
                _ => None,
            }
        }
    }
}
/// 用户登录事件
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserLoginEvent {
    #[prost(string, tag = "1")]
    pub email: ::prost::alloc::string::String,
    /// password, oauth, etc.
    #[prost(string, tag = "2")]
    pub login_method: ::prost::alloc::string::String,
}
/// 用户登出事件
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserLogoutEvent {
    #[prost(string, tag = "1")]
    pub email: ::prost::alloc::string::String,
}
/// 用户注册事件
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserRegisterEvent {
    #[prost(string, tag = "1")]
    pub email: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub workspace_id: ::prost::alloc::string::String,
    /// email, oauth, etc.
    #[prost(string, tag = "3")]
    pub registration_method: ::prost::alloc::string::String,
}
/// 聊天创建事件
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatCreatedEvent {
    #[prost(string, tag = "1")]
    pub workspace_id: ::prost::alloc::string::String,
    /// single, group, channel
    #[prost(string, tag = "2")]
    pub chat_type: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub initial_members_count: i32,
}
/// 消息发送事件
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MessageSentEvent {
    #[prost(string, tag = "1")]
    pub chat_id: ::prost::alloc::string::String,
    /// text, file, image, etc.
    #[prost(string, tag = "2")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub size: i32,
    #[prost(int32, tag = "4")]
    pub total_files: i32,
    #[prost(bool, tag = "5")]
    pub has_mentions: bool,
    #[prost(bool, tag = "6")]
    pub has_links: bool,
}
/// 加入聊天事件
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatJoinedEvent {
    #[prost(string, tag = "1")]
    pub chat_id: ::prost::alloc::string::String,
    /// invited, link, search
    #[prost(string, tag = "2")]
    pub join_method: ::prost::alloc::string::String,
}
/// 离开聊天事件
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatLeftEvent {
    #[prost(string, tag = "1")]
    pub chat_id: ::prost::alloc::string::String,
    /// voluntary, kicked, deleted
    #[prost(string, tag = "2")]
    pub leave_reason: ::prost::alloc::string::String,
}
/// 导航事件
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NavigationEvent {
    #[prost(string, tag = "1")]
    pub from: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub to: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub duration_ms: i32,
}
/// 文件上传事件
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileUploadedEvent {
    #[prost(string, tag = "1")]
    pub file_type: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub file_size: i64,
    /// drag_drop, button, paste
    #[prost(string, tag = "3")]
    pub upload_method: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub upload_duration_ms: i32,
}
/// 文件下载事件
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileDownloadedEvent {
    #[prost(string, tag = "1")]
    pub file_type: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub file_size: i64,
    #[prost(int32, tag = "3")]
    pub download_duration_ms: i32,
}
/// 搜索事件
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchPerformedEvent {
    /// messages, users, files
    #[prost(string, tag = "1")]
    pub search_type: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub query_length: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub results_count: i32,
    #[prost(int32, tag = "4")]
    pub search_duration_ms: i32,
    #[prost(bool, tag = "5")]
    pub has_filters: bool,
}
/// 通知事件
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotificationReceivedEvent {
    /// message, mention, system
    #[prost(string, tag = "1")]
    pub notification_type: ::prost::alloc::string::String,
    /// chat, system, user
    #[prost(string, tag = "2")]
    pub source: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub was_clicked: bool,
}
/// 错误事件
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ErrorOccurredEvent {
    #[prost(string, tag = "1")]
    pub error_type: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub error_code: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub stack_trace: ::prost::alloc::string::String,
    /// what user was doing
    #[prost(string, tag = "5")]
    pub context: ::prost::alloc::string::String,
}
/// 机器人响应事件
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BotResponseEvent {
    #[prost(string, tag = "1")]
    pub bot_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub chat_id: ::prost::alloc::string::String,
    /// ai_chat, command, auto_reply
    #[prost(string, tag = "3")]
    pub response_type: ::prost::alloc::string::String,
    #[prost(uint64, tag = "4")]
    pub response_time_ms: u64,
    #[prost(uint32, tag = "5")]
    pub tokens_used: u32,
    #[prost(bool, tag = "6")]
    pub success: bool,
    /// if failed
    #[prost(string, tag = "7")]
    pub error_message: ::prost::alloc::string::String,
}
/// 记录事件请求
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordEventRequest {
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<EventContext>,
    #[prost(
        oneof = "record_event_request::EventType",
        tags = "10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25"
    )]
    pub event_type: ::core::option::Option<record_event_request::EventType>,
}
/// Nested message and enum types in `RecordEventRequest`.
pub mod record_event_request {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum EventType {
        #[prost(message, tag = "10")]
        AppStart(super::AppStartEvent),
        #[prost(message, tag = "11")]
        AppExit(super::AppExitEvent),
        #[prost(message, tag = "12")]
        UserLogin(super::UserLoginEvent),
        #[prost(message, tag = "13")]
        UserLogout(super::UserLogoutEvent),
        #[prost(message, tag = "14")]
        UserRegister(super::UserRegisterEvent),
        #[prost(message, tag = "15")]
        ChatCreated(super::ChatCreatedEvent),
        #[prost(message, tag = "16")]
        MessageSent(super::MessageSentEvent),
        #[prost(message, tag = "17")]
        ChatJoined(super::ChatJoinedEvent),
        #[prost(message, tag = "18")]
        ChatLeft(super::ChatLeftEvent),
        #[prost(message, tag = "19")]
        Navigation(super::NavigationEvent),
        #[prost(message, tag = "20")]
        FileUploaded(super::FileUploadedEvent),
        #[prost(message, tag = "21")]
        FileDownloaded(super::FileDownloadedEvent),
        #[prost(message, tag = "22")]
        SearchPerformed(super::SearchPerformedEvent),
        #[prost(message, tag = "23")]
        NotificationReceived(super::NotificationReceivedEvent),
        #[prost(message, tag = "24")]
        ErrorOccurred(super::ErrorOccurredEvent),
        #[prost(message, tag = "25")]
        BotResponse(super::BotResponseEvent),
    }
}
/// 批量记录事件请求
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchRecordEventsRequest {
    #[prost(message, repeated, tag = "1")]
    pub events: ::prost::alloc::vec::Vec<AnalyticsEvent>,
}
/// 获取分析数据请求
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAnalyticsRequest {
    #[prost(string, tag = "1")]
    pub workspace_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub start_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "3")]
    pub end_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, repeated, tag = "4")]
    pub event_types: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// hour, day, week, month
    #[prost(string, tag = "5")]
    pub granularity: ::prost::alloc::string::String,
}
/// 分析数据点
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnalyticsDataPoint {
    #[prost(message, optional, tag = "1")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag = "2")]
    pub event_type: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub count: i64,
    #[prost(map = "string, string", tag = "4")]
    pub dimensions: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// 获取分析数据响应
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAnalyticsResponse {
    #[prost(message, repeated, tag = "1")]
    pub data_points: ::prost::alloc::vec::Vec<AnalyticsDataPoint>,
    #[prost(int64, tag = "2")]
    pub total_events: i64,
}
/// 获取用户活跃度请求
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUserActivityRequest {
    #[prost(string, tag = "1")]
    pub workspace_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub start_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "3")]
    pub end_time: ::core::option::Option<::prost_types::Timestamp>,
}
/// 用户活跃度
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserActivity {
    #[prost(string, tag = "1")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub total_events: i64,
    #[prost(int64, tag = "3")]
    pub total_messages: i64,
    #[prost(int64, tag = "4")]
    pub total_sessions: i64,
    #[prost(int64, tag = "5")]
    pub total_time_ms: i64,
    #[prost(message, optional, tag = "6")]
    pub last_active: ::core::option::Option<::prost_types::Timestamp>,
}
/// 获取用户活跃度响应
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUserActivityResponse {
    #[prost(message, repeated, tag = "1")]
    pub activities: ::prost::alloc::vec::Vec<UserActivity>,
    #[prost(int64, tag = "2")]
    pub total_active_users: i64,
}
