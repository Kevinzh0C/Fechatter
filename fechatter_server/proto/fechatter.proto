syntax = "proto3";

package fechatter.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// Message streaming service for real-time communication
service MessageStreamService {
  // Stream messages for a specific chat
  rpc StreamMessages(StreamMessagesRequest) returns (stream MessageEvent);
  
  // Send message through stream (for high-throughput scenarios)
  rpc SendMessageStream(stream SendMessageRequest) returns (stream SendMessageResponse);
}

// File transfer service for efficient binary transfers
service FileTransferService {
  // Upload file in chunks
  rpc UploadFile(stream FileChunk) returns (FileUploadResponse);
  
  // Download file in chunks
  rpc DownloadFile(FileDownloadRequest) returns (stream FileChunk);
}

// Batch operations service
service BatchOperationService {
  // Batch send messages
  rpc BatchSendMessages(BatchSendMessagesRequest) returns (BatchSendMessagesResponse);
  
  // Batch mark messages as read
  rpc BatchMarkAsRead(BatchMarkAsReadRequest) returns (google.protobuf.Empty);
}

// Message types
message Message {
  int64 id = 1;
  int64 chat_id = 2;
  int64 sender_id = 3;
  string content = 4;
  repeated string files = 5;
  google.protobuf.Timestamp created_at = 6;
}

message MessageEvent {
  oneof event {
    Message new_message = 1;
    MessageUpdate message_update = 2;
    MessageDelete message_delete = 3;
    TypingIndicator typing_indicator = 4;
  }
}

message MessageUpdate {
  int64 message_id = 1;
  string new_content = 2;
  google.protobuf.Timestamp updated_at = 3;
}

message MessageDelete {
  int64 message_id = 1;
  google.protobuf.Timestamp deleted_at = 2;
}

message TypingIndicator {
  int64 chat_id = 1;
  int64 user_id = 2;
  bool is_typing = 3;
}

// Request/Response types
message StreamMessagesRequest {
  int64 chat_id = 1;
  google.protobuf.Timestamp since = 2;
}

message SendMessageRequest {
  int64 chat_id = 1;
  string content = 2;
  repeated string files = 3;
  string idempotency_key = 4;
}

message SendMessageResponse {
  Message message = 1;
  bool success = 2;
  string error = 3;
}

// File transfer types
message FileChunk {
  string file_id = 1;
  bytes data = 2;
  int32 chunk_number = 3;
  bool is_last = 4;
  int64 total_size = 5;
  string filename = 6;
  string content_type = 7;
}

message FileUploadResponse {
  string file_id = 1;
  string url = 2;
  int64 size = 3;
}

message FileDownloadRequest {
  string file_id = 1;
  int64 offset = 2;
  int64 limit = 3;
}

// Batch operation types
message BatchSendMessagesRequest {
  repeated SendMessageRequest messages = 1;
}

message BatchSendMessagesResponse {
  repeated SendMessageResponse results = 1;
  int32 success_count = 2;
  int32 failure_count = 3;
}

message BatchMarkAsReadRequest {
  int64 chat_id = 1;
  repeated int64 message_ids = 2;
  int64 user_id = 3;
} 
