### Variables
@baseUrl = http://localhost:6688

### ============================================================================
### 1. AUTHENTICATION TESTS - User Registration and Login
### ============================================================================

### 1.1 User Registration (Primary Test User)
# @name signup
POST {{baseUrl}}/api/signup
Content-Type: application/json

{
  "fullname": "Alice Johnson", 
  "email": "alice@acme.com",
  "password": "SecurePassword123!",
  "workspace": "Acme Corporation"
}

### Save response tokens (Updated format with data wrapper)
@accessToken = {{signup.response.body.$.data.access_token}}
@refreshToken = {{signup.response.body.$.data.refresh_token}}

### 1.2 User Registration (Secondary Test User)
# @name signup2
POST {{baseUrl}}/api/signup
Content-Type: application/json

{
  "fullname": "Bob Smith",
  "email": "bob@acme.com", 
  "password": "SecurePassword456!",
  "workspace": "Acme Corporation"
}

### 1.3 User Registration (Third Test User)
# @name signup3
POST {{baseUrl}}/api/signup
Content-Type: application/json

{
  "fullname": "Charlie Brown",
  "email": "charlie@acme.com",
  "password": "SecurePassword789!",
  "workspace": "Acme Corporation"
}

### 1.4 User Sign-in (Primary Authentication)
# @name login
POST {{baseUrl}}/api/signin
Content-Type: application/json

{
  "email": "alice@acme.com",
  "password": "SecurePassword123!"
}

### Save response tokens from login (Updated format with data wrapper)
@loginAccessToken = {{login.response.body.$.data.access_token}}
@loginRefreshToken = {{login.response.body.$.data.refresh_token}}

### 1.5 Token Refresh using Cookie Method
# @name refreshWithCookie
POST {{baseUrl}}/api/refresh
Content-Type: application/json
Cookie: refresh_token={{loginRefreshToken}}

### Save new tokens from refresh with cookie (Updated format with data wrapper)
@accessTokenFromCookie = {{refreshWithCookie.response.body.$.data.access_token}}
@refreshTokenFromCookie = {{refreshWithCookie.response.body.$.data.refresh_token}}

### 1.6 Fresh Login for Comprehensive Testing
# @name login2
POST {{baseUrl}}/api/signin
Content-Type: application/json

{
  "email": "alice@acme.com",
  "password": "SecurePassword123!"
}

### Save tokens from second login (Updated format with data wrapper)
@accessToken = {{login2.response.body.$.data.access_token}}
@refreshToken = {{login2.response.body.$.data.refresh_token}}

### 1.7 Token Refresh using Authorization Header
# @name refreshWithHeader
POST {{baseUrl}}/api/refresh
Content-Type: application/json
Authorization: Bearer {{refreshToken}}

### Save new tokens from refresh (Updated format with data wrapper)
@newAccessToken = {{refreshWithHeader.response.body.$.data.access_token}}
@newRefreshToken = {{refreshWithHeader.response.body.$.data.refresh_token}}

### ============================================================================
### 2. AUTHENTICATION ERROR HANDLING TESTS
### ============================================================================

### 2.1 Invalid User Registration (Non-existent Email)
POST {{baseUrl}}/api/signin
Content-Type: application/json

{
  "email": "nonexistent@acme.com",
  "password": "SecurePassword123!"
}

### 2.2 Invalid Password Authentication
POST {{baseUrl}}/api/signin
Content-Type: application/json

{
  "email": "alice@acme.com",
  "password": "WrongPassword123!"
}

### ============================================================================
### 3. WORKSPACE AND CHAT MANAGEMENT TESTS
### ============================================================================

### 3.1 List Workspace Chats (Updated Route)
GET {{baseUrl}}/api/workspace/chats
Authorization: Bearer {{loginAccessToken}}

### 3.2 Create New Chat (Updated Route)
# @name createChat
POST {{baseUrl}}/api/workspace/chats
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "name": "Production Test Chat",
  "chat_type": "Group", 
  "members": [1, 2, 3],
  "description": "Comprehensive production-level testing chat"
}

### Get chat ID from response (Updated format with data wrapper)
@chatId = {{createChat.response.body.$.data.id}}

### 3.3 Get Chat Details
GET {{baseUrl}}/api/chat/{{chatId}}
Authorization: Bearer {{accessToken}}

### 3.4 Update Chat Information
PATCH {{baseUrl}}/api/chat/{{chatId}}
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "name": "Updated Production Test Chat",
  "description": "Updated comprehensive production-level testing chat"
}

### 3.5 List Chat Members
GET {{baseUrl}}/api/chat/{{chatId}}/members
Authorization: Bearer {{accessToken}}

### 3.6 Add Members to Chat
POST {{baseUrl}}/api/chat/{{chatId}}/members
Content-Type: application/json
Authorization: Bearer {{accessToken}}

[2, 3]

### ============================================================================
### 4. FILE MANAGEMENT TESTS (Production-Level)
### ============================================================================

### 4.1 Multi-file Upload (Production Binary Support)
# @name uploadFile
POST {{baseUrl}}/api/upload
Authorization: Bearer {{accessToken}}
Content-Type: multipart/form-data; boundary=ProductionBoundary

--ProductionBoundary
Content-Disposition: form-data; name="files"; filename="test_document.txt"
Content-Type: text/plain

This is a production-level test document with comprehensive content.
It includes multiple lines and special characters: !@#$%^&*()
Testing file upload functionality in production environment.
--ProductionBoundary
Content-Disposition: form-data; name="files"; filename="test_image.png"
Content-Type: image/png

< /Users/zhangkaiqi/Downloads/queryPane.png
--ProductionBoundary--

### Get uploaded file URLs from response (Updated format with data wrapper)
@fileUrl1 = {{uploadFile.response.body.$.data[0]}}
@fileUrl2 = {{uploadFile.response.body.$.data[1]}}

### 4.2 Single File Upload Test
# @name uploadSingleFile
POST {{baseUrl}}/api/files/single
Authorization: Bearer {{accessToken}}
Content-Type: multipart/form-data; boundary=SingleFileBoundary

--SingleFileBoundary
Content-Disposition: form-data; name="file"; filename="single_test.txt"
Content-Type: text/plain

Production-level single file upload test content.
--SingleFileBoundary--

### Get single file URL (Updated format with data wrapper)
@singleFileUrl = {{uploadSingleFile.response.body.$.data.url}}

### 4.3 File Access Test (Production Path Structure)
GET {{baseUrl}}/api/files/1/e89/663/c9ef07886b308ac0ea964f143e30ccc924db69f8cbc483299e566b0ff6.png
Authorization: Bearer {{accessToken}}

### 4.4 File Storage Structure Fix (Production Maintenance)
POST {{baseUrl}}/api/workspaces/1/files/fix
Authorization: Bearer {{accessToken}}

### ============================================================================
### 5. MESSAGE MANAGEMENT TESTS (Production-Level)
### ============================================================================

### 5.1 Send Text Message
# @name sendTextMessage
POST {{baseUrl}}/api/chat/{{chatId}}/messages
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "content": "ðŸš€ Production-level message testing with comprehensive content validation",
  "files": []
}

### Save message ID (Updated format with data wrapper)
@messageId1 = {{sendTextMessage.response.body.$.data.id}}

### 5.2 Send Message with File Attachments
# @name sendMessageWithFiles
POST {{baseUrl}}/api/chat/{{chatId}}/messages
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "content": "ðŸ“Ž Production message with multiple file attachments - comprehensive testing",
  "files": ["{{fileUrl1}}", "{{fileUrl2}}"]
}

### Save message ID with files (Updated format with data wrapper)
@messageWithFilesId = {{sendMessageWithFiles.response.body.$.data.id}}

### 5.3 Send Message with Idempotency Key (Production Duplicate Detection)
# @name sendIdempotentMessage
POST {{baseUrl}}/api/chat/{{chatId}}/messages
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "content": "ðŸ”„ Production idempotent message - duplicate detection testing",
  "files": [],
  "idempotency_key": "prod-test-idempotency-key-001"
}

### 5.4 Attempt Duplicate Message (Should be Rejected)
# @name sendDuplicateMessage
POST {{baseUrl}}/api/chat/{{chatId}}/messages
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "content": "ðŸ”„ Production idempotent message - duplicate detection testing",
  "files": [],
  "idempotency_key": "prod-test-idempotency-key-001"
}

### 5.5 List Messages with Pagination
GET {{baseUrl}}/api/chat/{{chatId}}/messages?limit=10&offset=0
Authorization: Bearer {{accessToken}}

### 5.6 List Messages with Cursor-based Pagination
GET {{baseUrl}}/api/chat/{{chatId}}/messages?last_id={{messageId1}}&limit=5
Authorization: Bearer {{accessToken}}

### ============================================================================
### 6. SEARCH FUNCTIONALITY TESTS (Production Full-Text Search)
### ============================================================================

### 6.1 Global Message Search (Production Search Service)
POST {{baseUrl}}/api/search/messages
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "query": "production testing",
  "workspace_id": 1,
  "limit": 20,
  "offset": 0
}

### 6.2 Search Suggestions (Production Auto-complete)
GET {{baseUrl}}/api/search/suggestions?query=prod&workspace_id=1
Authorization: Bearer {{accessToken}}

### 6.3 Chat-specific Message Search (GET Method)
GET {{baseUrl}}/api/chat/{{chatId}}/messages/search?query=comprehensive&limit=10
Authorization: Bearer {{accessToken}}

### 6.4 Chat-specific Message Search (POST Method with Advanced Filters)
POST {{baseUrl}}/api/chat/{{chatId}}/messages/search
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "query": "production",
  "limit": 15,
  "offset": 0,
  "filters": {
    "sender_id": 1,
    "date_from": "2024-01-01",
    "date_to": "2024-12-31"
  }
}

### 6.5 Admin Chat Reindexing (Production Search Maintenance)
POST {{baseUrl}}/api/admin/chat/{{chatId}}/reindex
Authorization: Bearer {{accessToken}}

### ============================================================================
### 7. REAL-TIME COMMUNICATION TESTS (Production WebSocket Features)
### ============================================================================

### 7.1 Start Typing Indicator
POST {{baseUrl}}/api/chat/{{chatId}}/typing/start
Authorization: Bearer {{accessToken}}

### 7.2 Stop Typing Indicator
POST {{baseUrl}}/api/chat/{{chatId}}/typing/stop
Authorization: Bearer {{accessToken}}

### 7.3 Get Currently Typing Users
GET {{baseUrl}}/api/chat/{{chatId}}/typing/users
Authorization: Bearer {{accessToken}}

### 7.4 Update User Presence Status
POST {{baseUrl}}/api/realtime/presence
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "status": "online",
  "activity": "active"
}

### 7.5 Mark Message as Read (Production Read Receipts)
POST {{baseUrl}}/api/chat/{{chatId}}/messages/{{messageId1}}/read
Authorization: Bearer {{accessToken}}

### 7.6 Get Message Read Receipts
GET {{baseUrl}}/api/messages/{{messageId1}}/receipts
Authorization: Bearer {{accessToken}}

### ============================================================================
### 8. USER PROFILE MANAGEMENT TESTS
### ============================================================================

### 8.1 Get Current User Profile
GET {{baseUrl}}/api/users/profile
Authorization: Bearer {{accessToken}}

### 8.2 Update Current User Profile
PUT {{baseUrl}}/api/users/profile
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "fullname": "Alice Johnson (Updated)",
  "bio": "Production test user with comprehensive profile",
  "avatar_url": "{{fileUrl1}}"
}

### 8.3 Get User Profile by ID
GET {{baseUrl}}/api/users/1/profile
Authorization: Bearer {{accessToken}}

### 8.4 Update User Profile by ID (Admin Operation)
PUT {{baseUrl}}/api/users/1/profile
Content-Type: application/json
Authorization: Bearer {{accessToken}}

{
  "fullname": "Alice Johnson (Admin Updated)",
  "bio": "Updated by admin - production testing"
}

### ============================================================================
### 9. CACHE AND SYSTEM MANAGEMENT TESTS
### ============================================================================

### 9.1 Get Cache Statistics (Production Monitoring)
GET {{baseUrl}}/api/cache/stats
Authorization: Bearer {{accessToken}}

### 9.2 Get Cache Configuration
GET {{baseUrl}}/api/cache/config
Authorization: Bearer {{accessToken}}

### ============================================================================
### 10. AUTHENTICATION LIFECYCLE TESTS
### ============================================================================

### 10.1 Logout Current Session
POST {{baseUrl}}/api/logout
Authorization: Bearer {{accessToken}}

### 10.2 Get Fresh Tokens for Logout All Test
# @name freshLoginForLogoutAll
POST {{baseUrl}}/api/signin
Content-Type: application/json

{
  "email": "alice@acme.com",
  "password": "SecurePassword123!"
}

### Save fresh tokens (Updated format with data wrapper)
@freshAccessToken = {{freshLoginForLogoutAll.response.body.$.data.access_token}}
@freshRefreshToken = {{freshLoginForLogoutAll.response.body.$.data.refresh_token}}

### 10.3 Logout All Sessions (Production Security Feature)
POST {{baseUrl}}/api/logout-all
Authorization: Bearer {{freshAccessToken}}

### 10.4 Attempt to Use Revoked Token (Should Fail)
POST {{baseUrl}}/api/refresh
Content-Type: application/json
Authorization: Bearer {{freshRefreshToken}}

### ============================================================================
### 11. SYSTEM HEALTH AND MONITORING TESTS
### ============================================================================

### 11.1 Comprehensive Health Check (Production Monitoring)
GET {{baseUrl}}/health

### 11.2 Simple Health Check (Load Balancer Compatible)
GET {{baseUrl}}/health/readiness

### ============================================================================
### 12. ERROR HANDLING AND EDGE CASE TESTS
### ============================================================================

### 12.1 Access Non-existent Chat
GET {{baseUrl}}/api/chat/999999
Authorization: Bearer {{newAccessToken}}

### 12.2 Send Message to Non-existent Chat
POST {{baseUrl}}/api/chat/999999/messages
Content-Type: application/json
Authorization: Bearer {{newAccessToken}}

{
  "content": "This should fail - chat does not exist",
  "files": []
}

### 12.3 Invalid Message Content (Empty)
POST {{baseUrl}}/api/chat/{{chatId}}/messages
Content-Type: application/json
Authorization: Bearer {{newAccessToken}}

{
  "content": "",
  "files": []
}

### 12.4 Invalid File Upload (Empty Boundary)
POST {{baseUrl}}/api/upload
Authorization: Bearer {{newAccessToken}}
Content-Type: multipart/form-data; boundary=EmptyBoundary

--EmptyBoundary--

### 12.5 Access Non-existent File
GET {{baseUrl}}/api/files/1/non/exi/stent1234567890abcdef1234567890abcdef12345678.txt
Authorization: Bearer {{newAccessToken}}

### 12.6 Invalid Chat Creation (Missing Required Fields)
POST {{baseUrl}}/api/workspace/chats
Content-Type: application/json
Authorization: Bearer {{newAccessToken}}

{
  "name": ""
}

### 12.7 Unauthorized Access (No Token)
GET {{baseUrl}}/api/workspace/chats

### 12.8 Invalid Token Format
GET {{baseUrl}}/api/workspace/chats
Authorization: Bearer invalid-token-format

### ============================================================================
### 13. PRODUCTION PERFORMANCE TESTS
### ============================================================================

### 13.1 Rapid Message Sending (Production Load Testing)
# @name rapidMessage1
POST {{baseUrl}}/api/chat/{{chatId}}/messages
Content-Type: application/json
Authorization: Bearer {{newAccessToken}}

{
  "content": "âš¡ Rapid message 1 - Production load testing with comprehensive content validation",
  "files": []
}

### 13.2 Rapid Message 2
# @name rapidMessage2
POST {{baseUrl}}/api/chat/{{chatId}}/messages
Content-Type: application/json
Authorization: Bearer {{newAccessToken}}

{
  "content": "âš¡ Rapid message 2 - Production load testing with comprehensive content validation",
  "files": []
}

### 13.3 Rapid Message 3
# @name rapidMessage3
POST {{baseUrl}}/api/chat/{{chatId}}/messages
Content-Type: application/json
Authorization: Bearer {{newAccessToken}}

{
  "content": "âš¡ Rapid message 3 - Production load testing with comprehensive content validation",
  "files": []
}

### 13.4 Concurrent Search Operations
POST {{baseUrl}}/api/search/messages
Content-Type: application/json
Authorization: Bearer {{newAccessToken}}

{
  "query": "rapid production",
  "workspace_id": 1,
  "limit": 50,
  "offset": 0
}

### ============================================================================
### 14. PRODUCTION FEATURE VALIDATION TESTS
### ============================================================================

### 14.1 Validate Chat Membership (Production Access Control)
GET {{baseUrl}}/api/chat/{{chatId}}/members
Authorization: Bearer {{newAccessToken}}

### 14.2 Validate File Storage Structure (Production File Management)
GET {{baseUrl}}/api/files/1/e89/663/c9ef07886b308ac0ea964f143e30ccc924db69f8cbc483299e566b0ff6.png
Authorization: Bearer {{newAccessToken}}

### 14.3 Validate Search Index Status (Production Search Health)
GET {{baseUrl}}/api/search/suggestions?query=test&workspace_id=1
Authorization: Bearer {{newAccessToken}}

### 14.4 Validate Real-time Features (Production WebSocket Health)
GET {{baseUrl}}/api/chat/{{chatId}}/typing/users
Authorization: Bearer {{newAccessToken}}

### ============================================================================
### 15. COMPREHENSIVE INTEGRATION TESTS
### ============================================================================

### 15.1 Full Workflow Test - Create Chat with Files and Messages
# @name fullWorkflowChat
POST {{baseUrl}}/api/workspace/chats
Content-Type: application/json
Authorization: Bearer {{newAccessToken}}

{
  "name": "Full Workflow Test Chat",
  "chat_type": "Group",
  "members": [1, 2],
  "description": "Complete production workflow testing chat"
}

### Get workflow chat ID (Updated format with data wrapper)
@workflowChatId = {{fullWorkflowChat.response.body.$.data.id}}

### 15.2 Upload File for Workflow Test
# @name workflowFileUpload
POST {{baseUrl}}/api/upload
Authorization: Bearer {{newAccessToken}}
Content-Type: multipart/form-data; boundary=WorkflowBoundary

--WorkflowBoundary
Content-Disposition: form-data; name="files"; filename="workflow_test.txt"
Content-Type: text/plain

Production workflow test file content.
This file will be used in comprehensive integration testing.
--WorkflowBoundary--

### Get workflow file URL (Updated format with data wrapper)
@workflowFileUrl = {{workflowFileUpload.response.body.$.data[0]}}

### 15.3 Send Message with Workflow File
# @name workflowMessage
POST {{baseUrl}}/api/chat/{{workflowChatId}}/messages
Content-Type: application/json
Authorization: Bearer {{newAccessToken}}

{
  "content": "ðŸ”„ Complete workflow test message with file attachment - production validation",
  "files": ["{{workflowFileUrl}}"]
}

### Get workflow message ID (Updated format with data wrapper)
@workflowMessageId = {{workflowMessage.response.body.$.data.id}}

### 15.4 Search for Workflow Message
POST {{baseUrl}}/api/chat/{{workflowChatId}}/messages/search
Content-Type: application/json
Authorization: Bearer {{newAccessToken}}

{
  "query": "workflow test",
  "limit": 10,
  "offset": 0
}

### 15.5 Mark Workflow Message as Read
POST {{baseUrl}}/api/chat/{{workflowChatId}}/messages/{{workflowMessageId}}/read
Authorization: Bearer {{newAccessToken}}

### 15.6 Get Workflow Message Receipts
GET {{baseUrl}}/api/messages/{{workflowMessageId}}/receipts
Authorization: Bearer {{newAccessToken}}

### ============================================================================
### PRODUCTION TESTING NOTES
### ============================================================================

# This comprehensive test suite covers:
# 
# âœ… Authentication & Authorization (Production JWT handling)
# âœ… User Management (Production user profiles)
# âœ… Workspace Management (Production multi-tenancy)
# âœ… Chat Operations (Production real-time messaging)
# âœ… File Management (Production binary file handling)
# âœ… Message Operations (Production message lifecycle)
# âœ… Search Functionality (Production full-text search)
# âœ… Real-time Features (Production WebSocket communication)
# âœ… Cache Management (Production performance optimization)
# âœ… Error Handling (Production error scenarios)
# âœ… Performance Testing (Production load validation)
# âœ… Integration Testing (Production workflow validation)
# âœ… System Health Monitoring (Production operational metrics)
#
# All tests are designed for production-level validation with:
# - Comprehensive error handling
# - Real binary file uploads
# - Production-scale data validation
# - Performance and load testing
# - Security and authorization testing
# - Complete feature integration testing
#
# Expected system status after all tests:
# - Database: âœ… Healthy
# - NATS: âœ… Healthy  
# - Search: âœ… Healthy
# - Cache: âœ… Healthy
# - All API endpoints: âœ… Operational
# - Real-time features: âœ… Functional
# - File management: âœ… Operational
# - Search indexing: âœ… Functional
