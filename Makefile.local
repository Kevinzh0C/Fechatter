# ============================================================================
# Fechatter Local Development Makefile - Local Compilation First Strategy
# ============================================================================
#
# 🎯 PURPOSE: Local development with pre-compiled binaries
# 🔧 STRATEGY: Local compilation first, then fast Docker packaging
# 🚀 WORKFLOW:
# 1. cargo build --release --workspace
# 2. docker-compose -f docker-compose.local.yml build
# 3. docker-compose -f docker-compose.local.yml up -d
#
# ============================================================================

.PHONY: help build build-dev build-single test docker-build docker-run clean deps check fmt clippy docker-clean docker-reset docker-rebuild docker-status

# Configuration
COMPOSE_FILE := docker-compose.local.yml
DOCKER_PROJECT := fechatter-local

# Colors for output
BLUE = \033[0;34m
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

# Default target
.DEFAULT_GOAL := help

## Display available commands
help: ## Show this help message
	@echo "$(CYAN)Fechatter Local Development Makefile$(NC)"
	@echo "$(YELLOW)Cross-compilation build system for x86_64 Docker containers$(NC)"
	@echo ""
	@echo "$(GREEN)📦 Build Commands:$(NC)"
	@echo "  make build               Build all services in release mode"
	@echo "  make build-dev           Build all services in dev mode"
	@echo "  make build-single SVC=<service>  Build single service"
	@echo ""
	@echo "$(GREEN)🐳 Docker Commands:$(NC)"
	@echo "  make docker-build        Build Docker images"
	@echo "  make docker-run          Start all services with gateway"
	@echo "  make docker-infra        Start infrastructure only"
	@echo "  make docker-core         Start core services" 
	@echo "  make docker-full         Start all services"
	@echo ""
	@echo "$(GREEN)🛠️ Docker Conflict Resolution:$(NC)"
	@echo "  make docker-clean        Clean containers/networks (solve dependency conflicts)"
	@echo "  make docker-reset        Force recreate containers (solve name conflicts)"
	@echo "  make docker-rebuild      Full rebuild after code changes"
	@echo "  make docker-restart      Quick restart with conflict resolution"
	@echo "  make docker-status       Show container status"
	@echo ""
	@echo "$(GREEN)🧹 Maintenance:$(NC)"
	@echo "  make clean               Clean build artifacts"
	@echo "  make test                Run tests"
	@echo "  make check               Run all checks"
	@echo ""
	@echo "$(YELLOW)💡 Quick Start Examples:$(NC)"
	@echo "  make build && make docker-run    # Build and start everything"
	@echo "  make docker-rebuild              # Full rebuild after code changes"
	@echo "  make docker-reset                # Fix container conflicts"

## Install dependencies
deps:
	@echo "$(BLUE)[DEPS]$(NC) Installing dependencies..."
	@if ! command -v cargo > /dev/null 2>&1; then \
		echo "$(RED)[ERROR]$(NC) Rust not found. Please install Rust first: https://rustup.rs/"; \
		exit 1; \
	fi
	@echo "$(GREEN)[SUCCESS]$(NC) Dependencies ready"

## Quick cargo check
check:
	@echo "$(BLUE)[CHECK]$(NC) Running cargo check..."
	@cargo check --workspace
	@echo "$(GREEN)[SUCCESS]$(NC) Cargo check completed"

## Format code
fmt:
	@echo "$(BLUE)[FMT]$(NC) Formatting code..."
	@cargo fmt --all
	@echo "$(GREEN)[SUCCESS]$(NC) Code formatted"

## Run clippy linter
clippy:
	@echo "$(BLUE)[CLIPPY]$(NC) Running clippy..."
	@cargo clippy --workspace --all-targets --all-features -- -D warnings
	@echo "$(GREEN)[SUCCESS]$(NC) Clippy check completed"

## Run test suite
test:
	@echo "$(BLUE)[TEST]$(NC) Running test suite..."
	@cargo test --workspace --all-features
	@echo "$(GREEN)[SUCCESS]$(NC) Tests completed"

## Build all services locally (release mode)
build:
	@echo "$(BLUE)[BUILD]$(NC) Building all services in release mode..."
	@cargo build --release --workspace
	@echo "$(GREEN)[SUCCESS]$(NC) All services built successfully"
	@echo ""
	@echo "$(BLUE)[INFO]$(NC) Built binaries:"
	@ls -la target/main/release/ | grep -E "(fechatter_server|analytics_server|notify_server|bot_server|fechatter_gateway)" || true

## Build all services locally (debug mode)
build-dev:
	@echo "$(BLUE)[BUILD-DEV]$(NC) Building all services in debug mode..."
	@cargo build --workspace
	@echo "$(GREEN)[SUCCESS]$(NC) All services built in debug mode"

## Build single service
build-single:
	@if [ -z "$(SERVICE)" ]; then \
		echo "$(RED)[ERROR]$(NC) SERVICE parameter required"; \
		echo "$(YELLOW)[USAGE]$(NC) make build-single SERVICE=fechatter_server"; \
		exit 1; \
	fi
	@echo "$(BLUE)[BUILD-SINGLE]$(NC) Building $(SERVICE)..."
	@cargo build --release --bin $(SERVICE)
	@echo "$(GREEN)[SUCCESS]$(NC) $(SERVICE) built successfully"

## Build Docker images using local binaries
docker-build: build
	@echo "$(BLUE)[DOCKER-BUILD]$(NC) Building Docker images with local binaries..."
	@if [ ! -f "target/main/release/fechatter_server" ]; then \
		echo "$(RED)[ERROR]$(NC) Local binaries not found. Run 'make build' first."; \
		exit 1; \
	fi
	@docker-compose -f $(COMPOSE_FILE) build
	@echo "$(GREEN)[SUCCESS]$(NC) Docker images built successfully"

## Start infrastructure only
docker-infra: docker-build
	@echo "$(BLUE)[DOCKER-INFRA]$(NC) Starting infrastructure services..."
	@docker-compose -f $(COMPOSE_FILE) --profile infrastructure up -d
	@echo "$(GREEN)[SUCCESS]$(NC) Infrastructure services started"
	@echo ""
	@echo "$(BLUE)[INFO]$(NC) Infrastructure URLs:"
	@echo "  Database:   postgresql://fechatter:fechatter_password@localhost:5432/fechatter"
	@echo "  Redis:      redis://:fechatter_redis_pass@localhost:6379"
	@echo "  NATS:       nats://localhost:4222"
	@echo "  Search:     http://localhost:7700"
	@echo "  ClickHouse: http://localhost:8123"

## Start core services
docker-core: docker-build
	@echo "$(BLUE)[DOCKER-CORE]$(NC) Starting core services..."
	@docker-compose -f $(COMPOSE_FILE) --profile core up -d
	@echo "$(GREEN)[SUCCESS]$(NC) Core services started"
	@make _show-service-urls

## Start full development stack
docker-run: docker-build
	@echo "$(BLUE)[DOCKER-RUN]$(NC) Starting full development stack..."
	@docker-compose -f $(COMPOSE_FILE) --profile full up -d
	@echo "$(GREEN)[SUCCESS]$(NC) Full stack started"
	@make _show-service-urls

## Quick rebuild and restart single service
quick-rebuild:
	@if [ -z "$(SERVICE)" ]; then \
		echo "$(RED)[ERROR]$(NC) SERVICE parameter required"; \
		echo "$(YELLOW)[USAGE]$(NC) make quick-rebuild SERVICE=fechatter_server"; \
		exit 1; \
	fi
	@echo "$(BLUE)[QUICK-REBUILD]$(NC) Rebuilding $(SERVICE)..."
	@cargo build --release --bin $(SERVICE)
	@docker-compose -f $(COMPOSE_FILE) build $(SERVICE:_=-)
	@docker-compose -f $(COMPOSE_FILE) up -d $(SERVICE:_=-)
	@echo "$(GREEN)[SUCCESS]$(NC) $(SERVICE) rebuilt and restarted"

## Restart specific service
docker-restart:
	@if [ -z "$(SERVICE)" ]; then \
		echo "$(RED)[ERROR]$(NC) SERVICE parameter required"; \
		echo "$(YELLOW)[USAGE]$(NC) make docker-restart SERVICE=fechatter-server-local"; \
		exit 1; \
	fi
	@echo "$(BLUE)[RESTART]$(NC) Restarting $(SERVICE)..."
	@docker-compose -f $(COMPOSE_FILE) restart $(SERVICE)
	@echo "$(GREEN)[SUCCESS]$(NC) $(SERVICE) restarted"

## Show service logs
logs:
	@if [ -z "$(SERVICE)" ]; then \
		echo "$(BLUE)[LOGS]$(NC) Showing all service logs..."; \
		docker-compose -f $(COMPOSE_FILE) logs -f; \
	else \
		echo "$(BLUE)[LOGS]$(NC) Showing logs for $(SERVICE)..."; \
		docker-compose -f $(COMPOSE_FILE) logs -f $(SERVICE); \
	fi

## Show container status
status:
	@echo "$(BLUE)[STATUS]$(NC) Container status:"
	@docker-compose -f $(COMPOSE_FILE) ps
	@echo ""
	@echo "$(BLUE)[HEALTH]$(NC) Health status:"
	@docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep fechatter || echo "No Fechatter containers running"

## Stop all services
stop:
	@echo "$(BLUE)[STOP]$(NC) Stopping all services..."
	@docker-compose -f $(COMPOSE_FILE) down
	@echo "$(GREEN)[SUCCESS]$(NC) All services stopped"

## Clean build artifacts and Docker resources
clean:
	@echo "$(BLUE)[CLEAN]$(NC) Cleaning build artifacts..."
	@rm -rf target/main/release target/main/debug
	@echo "$(GREEN)[SUCCESS]$(NC) Build artifacts cleaned"

## Clean Docker images and volumes
clean-docker:
	@echo "$(BLUE)[CLEAN-DOCKER]$(NC) Cleaning Docker resources..."
	@docker-compose -f $(COMPOSE_FILE) down -v --remove-orphans
	@docker images | grep fechatter | awk '{print $$3}' | xargs -r docker rmi -f
	@echo "$(GREEN)[SUCCESS]$(NC) Docker resources cleaned"

## Deep clean everything
clean-all: clean clean-docker
	@echo "$(BLUE)[CLEAN-ALL]$(NC) Deep cleaning..."
	@cargo clean
	@docker system prune -af
	@echo "$(GREEN)[SUCCESS]$(NC) Everything cleaned"

## Full development workflow
dev: deps build docker-build docker-core
	@echo "$(GREEN)[SUCCESS]$(NC) Development environment ready!"
	@make _show-service-urls

## Production-ready workflow
prod: deps fmt clippy test build docker-build
	@echo "$(GREEN)[SUCCESS]$(NC) Production build completed"

## CI workflow
ci: check test build
	@echo "$(GREEN)[SUCCESS]$(NC) CI workflow completed"

## Internal: Show service URLs
_show-service-urls:
	@echo ""
	@echo "$(BLUE)[INFO]$(NC) Service URLs:"
	@echo "  Gateway:       http://localhost:8080"
	@echo "  Main Server:   http://localhost:6688"
	@echo "  Analytics:     http://localhost:6690"
	@echo "  Notifications: http://localhost:6687"
	@echo "  Bot Service:   http://localhost:6686"

# ============================================================================
# Database Commands
# ============================================================================

db-shell:
	@echo "$(BLUE)[DB-SHELL]$(NC) Opening PostgreSQL shell..."
	@docker-compose -f $(COMPOSE_FILE) exec postgres psql -U fechatter -d fechatter

redis-shell:
	@echo "$(BLUE)[REDIS-SHELL]$(NC) Opening Redis shell..."
	@docker-compose -f $(COMPOSE_FILE) exec redis redis-cli -a fechatter_redis_pass

# ============================================================================
# Individual Service Commands (Local Development)
# ============================================================================

run-server:
	@echo "$(BLUE)[RUN-SERVER]$(NC) Starting fechatter_server locally..."
	@cargo run --bin fechatter_server

run-analytics:
	@echo "$(BLUE)[RUN-ANALYTICS]$(NC) Starting analytics_server locally..."
	@cargo run --bin analytics_server

run-notify:
	@echo "$(BLUE)[RUN-NOTIFY]$(NC) Starting notify_server locally..."
	@cargo run --bin notify_server

run-bot:
	@echo "$(BLUE)[RUN-BOT]$(NC) Starting bot_server locally..."
	@cargo run --bin bot_server

run-gateway:
	@echo "$(BLUE)[RUN-GATEWAY]$(NC) Starting fechatter_gateway locally..."
	@cargo run --bin fechatter_gateway

# ============================================================================
# Common Development Patterns:
# ============================================================================
#
# 1. Initial setup:
#    make dev
#
# 2. Code change -> quick rebuild:
#    make quick-rebuild SERVICE=fechatter_server
#
# 3. Infrastructure only for local development:
#    make docker-infra
#    # Then run services locally with: cargo run --bin fechatter_server
#
# 4. Debug specific service:
#    make logs SERVICE=fechatter-server-local
#
# 5. Complete reset:
#    make clean-all && make dev
#
# ============================================================================

# Docker container conflict resolution commands

# 🧹 Clean up Docker containers and networks (solve dependency conflicts)
docker-clean:
	@echo "🧹 Cleaning up Docker containers and networks..."
	-docker compose -f docker-compose.local.yml down --remove-orphans --volumes
	-docker container prune -f
	-docker network prune -f
	@echo "✅ Docker cleanup completed"

# 🔄 Force recreate all containers (solve name conflicts)  
docker-reset:
	@echo "🔄 Force recreating all containers..."
	docker compose -f docker-compose.local.yml down --remove-orphans
	docker compose -f docker-compose.local.yml up -d --force-recreate --remove-orphans --profile gateway
	@echo "✅ All containers recreated successfully"

# 🔧 Full rebuild workflow (after code changes)
docker-rebuild:
	@echo "🔧 Full rebuild workflow starting..."
	./build-cross.sh --profile release
	docker compose -f docker-compose.local.yml down --remove-orphans
	docker compose -f docker-compose.local.yml build --no-cache
	docker compose -f docker-compose.local.yml up -d --force-recreate --remove-orphans --profile gateway
	@echo "✅ Full rebuild completed"

# 🚀 Quick restart (preserve data, solve conflicts)
docker-restart:
	@echo "🚀 Quick restart with conflict resolution..."
	docker compose -f docker-compose.local.yml restart
	@echo "✅ Services restarted"

# 📊 Show container status
docker-status:
	@echo "📊 Current container status:"
	docker compose -f docker-compose.local.yml ps
	@echo "\n🔍 All fechatter containers:"
	docker ps -a | grep fechatter || echo "No fechatter containers found"