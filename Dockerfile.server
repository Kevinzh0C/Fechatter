# Dockerfile for fechatter-server only
FROM rust:1.83-alpine3.20 AS builder

# Install build dependencies
RUN apk add --no-cache \
    musl-dev \
    openssl-dev \
    openssl-libs-static \
    pkgconfig \
    protobuf-dev \
    git \
    curl \
    build-base \
    perl \
    make \
    cmake

# Install protobuf with Google Well-Known Types
RUN curl -L https://github.com/protocolbuffers/protobuf/releases/download/v25.1/protoc-25.1-linux-x86_64.zip -o protoc.zip && \
    unzip protoc.zip -d /usr/local && \
    rm protoc.zip

# Set up cargo environment for static builds
ENV RUSTFLAGS="-C target-feature=-crt-static" \
    OPENSSL_STATIC=1 \
    OPENSSL_LIB_DIR=/usr/lib \
    OPENSSL_INCLUDE_DIR=/usr/include \
    PKG_CONFIG_ALLOW_CROSS=1 \
    PROTOC=/usr/local/bin/protoc

# Create app directory
WORKDIR /usr/src/app

# Copy workspace files (only what exists)
COPY Cargo.toml Cargo.lock ./
COPY fechatter_core/Cargo.toml ./fechatter_core/
COPY fechatter_server/Cargo.toml ./fechatter_server/
COPY fechatter_protos/Cargo.toml ./fechatter_protos/
COPY ai_sdk/Cargo.toml ./ai_sdk/
COPY swiftide-pgvector/Cargo.toml ./swiftide-pgvector/

# Create dummy directories for workspace members that don't exist
RUN mkdir -p analytics_server/src && echo "fn main() {}" > analytics_server/src/main.rs && \
    echo '[package]\nname = "analytics_server"\nversion = "0.1.0"\nedition = "2021"' > analytics_server/Cargo.toml
RUN mkdir -p fechatter_gateway/src && echo "fn main() {}" > fechatter_gateway/src/main.rs && \
    echo '[package]\nname = "fechatter_gateway"\nversion = "0.1.0"\nedition = "2021"' > fechatter_gateway/Cargo.toml
RUN mkdir -p bot_server/src && echo "fn main() {}" > bot_server/src/main.rs && \
    echo '[package]\nname = "bot_server"\nversion = "0.1.0"\nedition = "2021"' > bot_server/Cargo.toml
RUN mkdir -p notify_server/src && echo "fn main() {}" > notify_server/src/main.rs && \
    echo '[package]\nname = "notify_server"\nversion = "0.1.0"\nedition = "2021"' > notify_server/Cargo.toml

# Create dummy source files to cache dependencies
RUN mkdir -p fechatter_core/src && echo "fn main() {}" > fechatter_core/src/lib.rs
RUN mkdir -p fechatter_server/src && echo "fn main() {}" > fechatter_server/src/main.rs
RUN mkdir -p fechatter_protos/src && echo "fn main() {}" > fechatter_protos/src/lib.rs
RUN mkdir -p ai_sdk/src && echo "fn main() {}" > ai_sdk/src/lib.rs
RUN mkdir -p swiftide-pgvector/src && echo "fn main() {}" > swiftide-pgvector/src/lib.rs

# Build dependencies (this layer will be cached)
RUN cargo build --release -p fechatter_server && rm -rf target/release/deps/fechatter*

# Copy actual source code
COPY . .

# Clean and rebuild with actual source
RUN cargo clean -p fechatter_server -p fechatter_core -p fechatter_protos -p ai_sdk -p swiftide-pgvector
RUN cargo build --release -p fechatter_server

# Stage 2: Runtime environment
FROM alpine:3.20

# Install runtime dependencies
RUN apk add --no-cache \
    ca-certificates \
    openssl \
    libgcc \
    curl

# Create app user
RUN adduser -D -s /bin/sh appuser

# Copy binary from builder
COPY --from=builder /usr/src/app/target/release/fechatter-server /usr/local/bin/fechatter-server

# Copy migrations and config
COPY migrations /app/migrations
COPY fixtures/chat.yml /etc/fechatter/chat.yml

# Create directories for uploads and logs
RUN mkdir -p /app/uploads /app/logs && \
    chown -R appuser:appuser /app /etc/fechatter

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose port
EXPOSE 8080

# Switch to app user
USER appuser

# Set environment
ENV CONFIG_PATH="/etc/fechatter/chat.yml"

# Run the server
CMD ["/usr/local/bin/fechatter-server"] 