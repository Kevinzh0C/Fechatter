version: '3.8'

# ============================================================================
# Fechatter VCR Deployment - Using Vultr Container Registry Images
# ============================================================================
#
# ðŸŽ¯ PURPOSE: Production deployment using VCR pre-built images
# ðŸ”§ STRATEGY: Pull images from nrt.vultrcr.com/fechatter instead of building
# ðŸš€ WORKFLOW:
# 1. docker-compose -f docker-compose.vcr.yml pull
# 2. docker-compose -f docker-compose.vcr.yml up -d
#
# ============================================================================

x-common-env: &common-env
  RUST_LOG: ${RUST_LOG:-info,sqlx=warn}
  RUST_BACKTRACE: ${RUST_BACKTRACE:-1}

x-database-env: &database-env
  DATABASE_URL: postgresql://fechatter:fechatter_password@postgres:5432/fechatter

x-redis-env: &redis-env
  REDIS_URL: redis://:fechatter_redis_pass@redis:6379

x-nats-env: &nats-env
  NATS_URL: nats://nats:4222

x-search-env: &search-env
  MEILISEARCH_URL: http://meilisearch:7700
  MEILISEARCH_KEY: fechatter_search_key

x-clickhouse-env: &clickhouse-env
  CLICKHOUSE_HOST: clickhouse
  CLICKHOUSE_PORT: 8123
  CLICKHOUSE_URL: http://clickhouse:8123
  CLICKHOUSE_DATABASE: fechatter_analytics
  CLICKHOUSE_USER: default
  CLICKHOUSE_PASSWORD: ""

x-health-check: &default-health-check
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 30s

services:
  # ============================================================================
  # Infrastructure Services (same as local)
  # ============================================================================
  
  postgres:
    image: pgvector/pgvector:pg17
    container_name: fechatter-postgres-vcr
    environment:
      POSTGRES_DB: fechatter
      POSTGRES_USER: fechatter
      POSTGRES_PASSWORD: fechatter_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - fechatter-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fechatter -d fechatter"]
      <<: *default-health-check
    restart: unless-stopped
    profiles:
      - infrastructure
      - core
      - full

  redis:
    image: redis:7-alpine
    container_name: fechatter-redis-vcr
    command: redis-server --appendonly yes --requirepass fechatter_redis_pass
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - fechatter-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "fechatter_redis_pass", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    profiles:
      - infrastructure
      - core
      - full

  nats:
    image: nats:2.10-alpine
    container_name: fechatter-nats-vcr
    command: [
      "--jetstream", 
      "--store_dir=/data",
      "-m", "8222"
    ]
    volumes:
      - nats_data:/data
    ports:
      - "4222:4222"
      - "8222:8222"
    networks:
      - fechatter-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      <<: *default-health-check
    restart: unless-stopped
    profiles:
      - infrastructure
      - core
      - full

  meilisearch:
    image: getmeili/meilisearch:v1.6
    container_name: fechatter-meilisearch-vcr
    environment:
      MEILI_MASTER_KEY: fechatter_search_key
      MEILI_ENV: development
      MEILI_DB_PATH: /meili_data
      MEILI_HTTP_ADDR: 0.0.0.0:7700
      MEILI_LOG_LEVEL: WARN
    volumes:
      - meilisearch_data:/meili_data
    ports:
      - "7700:7700"
    networks:
      - fechatter-network
    healthcheck:
      test: ["CMD", "curl", "-f", "-H", "Authorization: Bearer fechatter_search_key", "http://localhost:7700/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 45s
    restart: unless-stopped
    profiles:
      - infrastructure
      - full
      - core

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: fechatter-clickhouse-vcr
    environment:
      CLICKHOUSE_DB: fechatter_analytics
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: ""
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
    networks:
      - fechatter-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      <<: *default-health-check
    restart: unless-stopped
    profiles:
      - infrastructure
      - full
      - core

  # ============================================================================
  # Application Services - Using VCR Images
  # ============================================================================

  fechatter-server:
    image: nrt.vultrcr.com/fechatter/server:prod
    container_name: fechatter-server-vcr
    environment:
      <<: [*common-env, *database-env, *redis-env, *nats-env, *search-env]
      SERVER_PORT: 6688
      JWT_SECRET: ${JWT_SECRET:-dev-jwt-secret-key}
      ANALYTICS_ENABLED: "true"
    volumes:
      - uploads_data:/app/uploads
      - app_logs:/app/logs
      - ./docker/configs/chat-ip.yml:/app/fechatter_server/chat.yml:ro
    ports:
      - "6688:6688"
    networks:
      - fechatter-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6688/health"]
      <<: *default-health-check
    restart: unless-stopped
    profiles:
      - core
      - full

  analytics-server:
    image: nrt.vultrcr.com/fechatter/analytics:prod
    container_name: analytics-server-vcr
    environment:
      <<: [*common-env, *database-env, *nats-env, *clickhouse-env]
      SERVER_PORT: 6690
      ANALYTICS_ENABLED: "true"
    volumes:
      - app_logs:/app/logs
      - analytics_data:/app/data
      - ./docker/configs/analytics-ip.yml:/app/analytics_server/analytics.yml:ro
    ports:
      - "6690:6690"
    networks:
      - fechatter-network
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      nats:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6690/health"]
      <<: *default-health-check
    restart: unless-stopped
    profiles:
      - core
      - full

  notify-server:
    image: nrt.vultrcr.com/fechatter/notify:prod
    container_name: notify-server-vcr
    environment:
      <<: [*common-env, *database-env, *redis-env, *nats-env]
      SERVER_PORT: 6687
      SSE_ENABLED: "true"
    volumes:
      - ./docker/configs/notify-ip.yml:/app/notify_server/notify.yml:ro
    ports:
      - "6687:6687"
    networks:
      - fechatter-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6687/health"]
      <<: *default-health-check
    restart: unless-stopped
    profiles:
      - core
      - full

  bot-server:
    image: nrt.vultrcr.com/fechatter/bot:prod
    container_name: bot-server-vcr
    environment:
      <<: [*common-env, *database-env, *redis-env, *nats-env, *search-env]
      SERVER_PORT: 6686
      OPENAI_API_KEY: ${OPENAI_API_KEY:-sk-proj-fechatter-prod-2024-v1-xK9mJ7nR8qT3wP5sL2hF4vN6bC8dG1zA}
      RAG_ENABLED: "true"
    volumes:
      - bot_data:/app/data
      - ./docker/configs/bot-ip.yml:/app/bot_server/bot.yml:ro
    ports:
      - "6686:6686"
    networks:
      - fechatter-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6686/health"]
      <<: *default-health-check
    restart: unless-stopped
    profiles:
      - full
      - core

  fechatter-gateway:
    image: nrt.vultrcr.com/fechatter/gateway:prod
    container_name: fechatter-gateway-vcr
    environment:
      GATEWAY_CONFIG_PATH: /app/config/gateway.yml
    networks:
      - fechatter-network
    volumes:
      - ./fechatter_gateway/gateway.yml:/app/config/gateway.yml:ro
    ports:
      - "8080:8080"
    profiles:
      - full
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3
    restart: unless-stopped
    depends_on:
      fechatter-server:
        condition: service_healthy
      analytics-server:
        condition: service_healthy
      notify-server:
        condition: service_healthy

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nats_data:
    driver: local
  meilisearch_data:
    driver: local
  clickhouse_data:
    driver: local
  uploads_data:
    driver: local
  app_logs:
    driver: local
  analytics_data:
    driver: local
  bot_data:
    driver: local

networks:
  fechatter-network:
    driver: bridge

# ============================================================================
# VCR Deployment Usage Examples:
# ============================================================================
#
# ðŸš€ Complete VCR Deployment:
#    docker-compose -f docker-compose.vcr.yml pull
#    docker-compose -f docker-compose.vcr.yml --profile full up -d
#
# ðŸŽ¯ Core services only:
#    docker-compose -f docker-compose.vcr.yml --profile core up -d
#
# ðŸ”§ Infrastructure only:
#    docker-compose -f docker-compose.vcr.yml --profile infrastructure up -d
#
# ðŸ”„ Update to latest images:
#    docker-compose -f docker-compose.vcr.yml pull
#    docker-compose -f docker-compose.vcr.yml --profile full up -d
#
# ðŸ›‘ Stop all services:
#    docker-compose -f docker-compose.vcr.yml down
#
# ============================================================================ 