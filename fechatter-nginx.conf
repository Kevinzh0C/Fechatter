upstream fechatter_server {
    server localhost:6688;
}

upstream analytics_server {
    server localhost:6690;
}

upstream notify_server {
    server localhost:6687;
}

upstream bot_server {
    server localhost:6686;
}

# Local health check service
upstream health_check {
    server localhost:9999;
}

server {
    listen 8080;
    server_name _;
    
    # Add CORS headers for all requests
    add_header Access-Control-Allow-Origin "http://localhost:1420" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, PATCH, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With, Accept, Origin, X-API-Key, X-Request-Id, X-Workspace-Id, Cache-Control" always;
    add_header Access-Control-Allow-Credentials "true" always;
    add_header Access-Control-Max-Age "86400" always;
    
    # Handle preflight requests
    if ($request_method = OPTIONS) {
        return 204;
    }
    
    # Comprehensive global health check via Python service
    location /health {
        access_log off;
        proxy_pass http://health_check/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_connect_timeout 10s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }
    
    # Simple ping endpoint via Python service
    location /ping {
        access_log off;
        proxy_pass http://health_check/ping;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_connect_timeout 3s;
        proxy_send_timeout 3s;
        proxy_read_timeout 3s;
    }
    
    # Main API routing with CORS
    location /api/ {
        proxy_pass http://fechatter_server;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # Analytics service with CORS
    location /analytics/ {
        proxy_pass http://analytics_server/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
    
    # Notifications (SSE) with CORS
    location ~ ^/(events|notify|online-users) {
        proxy_pass http://notify_server;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # SSE specific settings
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_buffering off;
        proxy_cache off;
        proxy_connect_timeout 30s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }
    
    # Bot service with CORS
    location /bot/ {
        proxy_pass http://bot_server/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # Default response with CORS
    location / {
        return 200 '{"status":"ok","gateway":"nginx-cors","timestamp":"$time_iso8601","health_check":"/health","ping":"/ping","comprehensive_health":"true"}';
        add_header Content-Type application/json;
    }
} 