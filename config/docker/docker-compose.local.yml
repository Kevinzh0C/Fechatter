version: '3.8'

# ============================================================================
# Fechatter Local Development Docker Compose - x86_64 Cross-compiled
# ============================================================================
#
# üéØ PURPOSE: Local development with pre-compiled x86_64 binaries
# üîß STRATEGY: Cross-compilation first, then fast Docker packaging
# üöÄ WORKFLOW:
# 1. ./build-cross.sh --profile release
# 2. docker compose -f docker-compose.local.yml build
# 3. docker compose -f docker-compose.local.yml up -d
#
# üõ†Ô∏è CONFLICT RESOLUTION:
# - Use --force-recreate to rebuild containers
# - Use --remove-orphans to clean up unused containers
# - Proper depends_on chains prevent dependency conflicts
#
# üîÑ RECOMMENDED COMMANDS:
# docker compose -f docker-compose.local.yml down --remove-orphans
# docker compose -f docker-compose.local.yml up -d --force-recreate --remove-orphans
#
# ============================================================================

x-common-env: &common-env
  RUST_LOG: ${RUST_LOG:-debug,sqlx=warn}
  RUST_BACKTRACE: ${RUST_BACKTRACE:-1}
  ARCHITECTURE: x86_64

x-database-env: &database-env
  DATABASE_URL: postgresql://fechatter:fechatter_password@postgres:5432/fechatter

x-redis-env: &redis-env
  REDIS_URL: redis://:fechatter_redis_pass@redis:6379

x-nats-env: &nats-env
  NATS_URL: nats://nats:4222

x-search-env: &search-env
  MEILISEARCH_URL: http://meilisearch:7700
  MEILISEARCH_KEY: fechatter_search_key

x-clickhouse-env: &clickhouse-env
  CLICKHOUSE_HOST: clickhouse
  CLICKHOUSE_PORT: 8123
  CLICKHOUSE_URL: http://clickhouse:8123
  CLICKHOUSE_NATIVE_URL: clickhouse://clickhouse:9000/fechatter_analytics
  CLICKHOUSE_DATABASE: fechatter_analytics
  CLICKHOUSE_USER: default
  CLICKHOUSE_PASSWORD: ""

x-supervisor-env: &supervisor-env
  ENV_BOT_ENABLED: ${BOT_ENABLED:-false}
  ENV_GATEWAY_ENABLED: ${GATEWAY_ENABLED:-false}

x-health-check: &default-health-check
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 30s

services:
  # ============================================================================
  # Infrastructure Services
  # ============================================================================
  
  postgres:
    image: pgvector/pgvector:pg17
    container_name: fechatter-postgres-local
    environment:
      POSTGRES_DB: fechatter
      POSTGRES_USER: fechatter
      POSTGRES_PASSWORD: fechatter_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - fechatter-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fechatter -d fechatter"]
      <<: *default-health-check
    restart: unless-stopped
    profiles:
      - infrastructure
      - core
      - full
      - gateway

  redis:
    image: redis:7-alpine
    container_name: fechatter-redis-local
    command: redis-server --appendonly yes --requirepass fechatter_redis_pass
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - fechatter-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "fechatter_redis_pass", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    profiles:
      - infrastructure
      - core
      - full
      - gateway

  nats:
    image: nats:2.10-alpine
    container_name: fechatter-nats-local
    command: [
      "--jetstream", 
      "--store_dir=/data",
      "-m", "8222"
    ]
    volumes:
      - nats_data:/data
    ports:
      - "4222:4222"
      - "8222:8222"
    networks:
      - fechatter-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      <<: *default-health-check
    restart: unless-stopped
    profiles:
      - infrastructure
      - core
      - full
      - gateway

  meilisearch:
    image: getmeili/meilisearch:v1.6
    container_name: fechatter-meilisearch-local
    environment:
      MEILI_MASTER_KEY: fechatter_search_key
      MEILI_ENV: development
      MEILI_DB_PATH: /meili_data
      MEILI_HTTP_ADDR: 0.0.0.0:7700
      MEILI_LOG_LEVEL: WARN
      MEILI_MAX_INDEXING_MEMORY: 512mb
      MEILI_MAX_INDEXING_THREADS: 2
      # MEILI_EXPERIMENTAL_ENABLE_METRICS: true  # Commented out due to startup issues
    volumes:
      - meilisearch_data:/meili_data
    ports:
      - "7700:7700"
    networks:
      - fechatter-network
    healthcheck:
      test: ["CMD", "curl", "-f", "-H", "Authorization: Bearer fechatter_search_key", "http://localhost:7700/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 45s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'
    profiles:
      - infrastructure
      - full
      - core
      - gateway

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: fechatter-clickhouse-local
    environment:
      CLICKHOUSE_DB: fechatter_analytics
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: ""
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./fechatter_protos/storage/analytics.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "8123:8123"
      - "9000:9000"
    networks:
      - fechatter-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      <<: *default-health-check
    restart: unless-stopped
    profiles:
      - infrastructure
      - full
      - core
      - gateway

  # ============================================================================
  # Application Services - Using x86_64 Cross-compiled Binaries
  # ============================================================================

  fechatter-server:
    build:
      context: .
      dockerfile: Dockerfile.local
      target: fechatter-server
      platforms:
        - linux/amd64
    image: fechatter/server:local-x86_64
    container_name: fechatter-server-local
    working_dir: /app
    environment:
      <<: [*common-env, *database-env, *redis-env, *nats-env, *search-env]
      SERVER_PORT: 6688
      BASE_DIR: /app/uploads
      JWT_SECRET: ${JWT_SECRET:-dev-jwt-secret-key}
      ANALYTICS_ENABLED: "true"
    volumes:
      - .:/app:ro
      - uploads_data:/app/uploads
      - app_logs:/app/logs
    ports:
      - "6688:6688"
    networks:
      - fechatter-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6688/health"]
      <<: *default-health-check
    profiles:
      - core
      - full
      - gateway

  analytics-server:
    build:
      context: .
      dockerfile: Dockerfile.local
      target: analytics-server
      platforms:
        - linux/amd64
    image: fechatter/analytics:local-x86_64
    container_name: analytics-server-local
    working_dir: /app
    environment:
      <<: [*common-env, *database-env, *nats-env, *clickhouse-env]
      SERVER_PORT: 6690
      ANALYTICS_ENABLED: "true"
    volumes:
      - .:/app:ro
      - ./config/analytics.yml:/app/config/analytics.yml:ro
      - app_logs:/app/logs
      - analytics_data:/app/data
    ports:
      - "6690:6690"
    networks:
      - fechatter-network
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      nats:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6690/health"]
      <<: *default-health-check
    profiles:
      - core
      - full
      - gateway

  notify-server:
    build:
      context: .
      dockerfile: Dockerfile.local
      target: notify-server
      platforms:
        - linux/amd64
    image: fechatter/notify:local-x86_64
    container_name: notify-server-local
    working_dir: /app
    environment:
      <<: [*common-env, *database-env, *redis-env, *nats-env]
      SERVER_PORT: 6687
      SSE_ENABLED: "true"
    volumes:
      - .:/app:ro
    ports:
      - "6687:6687"
    networks:
      - fechatter-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6687/health"]
      <<: *default-health-check
    profiles:
      - core
      - full
      - gateway

  bot-server:
    build:
      context: .
      dockerfile: Dockerfile.local
      target: bot-server
      platforms:
        - linux/amd64
    image: fechatter/bot:local-x86_64
    container_name: bot-server-local
    working_dir: /app
    environment:
      <<: [*common-env, *database-env, *redis-env, *nats-env, *search-env]
      SERVER_PORT: 6686
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      RAG_ENABLED: "true"
    volumes:
      - .:/app:ro
      - bot_data:/app/data
    ports:
      - "6686:6686"
    networks:
      - fechatter-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6686/health"]
      <<: *default-health-check
    profiles:
      - full
      - core
      - gateway

  fechatter-gateway:
    build:
      context: .
      dockerfile: Dockerfile.local
      target: fechatter-gateway
      platforms:
        - linux/amd64
    image: fechatter/gateway:local-x86_64
    container_name: fechatter-gateway-local
    working_dir: /app
    environment:
      # Gateway configuration
      GATEWAY_CONFIG_PATH: /app/config/gateway.yml
    networks:
      - fechatter-network
    volumes:
      - .:/app:ro
      - ./fechatter_gateway/gateway.yml:/app/config/gateway.yml:ro
    ports:
      - "8080:8080"
    profiles:
      - gateway
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3
    depends_on:
      fechatter-server:
        condition: service_healthy
      analytics-server:
        condition: service_healthy
      notify-server:
        condition: service_healthy
    # Use production mode for stable operation with config file
    command: ["/usr/local/bin/fechatter_gateway", "--config", "/app/config/gateway.yml", "--production-mode", "--debug"]

  # ============================================================================
  # All-in-One Service with Supervisor - For Quick Development
  # ============================================================================

  fechatter-all-in-one:
    build:
      context: .
      dockerfile: Dockerfile.local
      target: all-in-one
      platforms:
        - linux/amd64
    image: fechatter/all-in-one:local-x86_64
    container_name: fechatter-all-in-one-local
    working_dir: /app
    environment:
      <<: [*common-env, *database-env, *redis-env, *nats-env, *search-env, *clickhouse-env, *supervisor-env]
      JWT_SECRET: ${JWT_SECRET:-dev-jwt-secret-key}
      ANALYTICS_ENABLED: "true"
      SSE_ENABLED: "true"
      RAG_ENABLED: ${RAG_ENABLED:-false}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
    volumes:
      - .:/app:ro
      - uploads_data:/app/uploads
      - app_logs:/app/logs
      - analytics_data:/app/data
      - bot_data:/app/data
    ports:
      - "6688:6688"   # Fechatter Server
      - "6690:6690"   # Analytics Server
      - "6687:6687"   # Notify Server
      - "6686:6686"   # Bot Server (if enabled)
      - "8080:8080"   # Gateway (if enabled)
    networks:
      - fechatter-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6688/health", "&&", "curl", "-f", "http://localhost:6690/health", "&&", "curl", "-f", "http://localhost:6687/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 90s
    profiles:
      - allinone
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nats_data:
    driver: local
  meilisearch_data:
    driver: local
  clickhouse_data:
    driver: local
  uploads_data:
    driver: local
  app_logs:
    driver: local
  analytics_data:
    driver: local
  bot_data:
    driver: local

networks:
  fechatter-network:
    driver: bridge

# ============================================================================
# x86_64 Cross-compilation Local Development Usage Examples:
# ============================================================================
#
# üîß Prerequisites (must run first):
#    ./build-cross.sh --profile release
#
# üöÄ One-Click Complete Startup (RECOMMENDED):
#    docker compose -f docker-compose.local.yml --profile gateway up -d
#    ‚Ü≥ Starts ALL services including gateway (complete Fechatter ecosystem)
#
# üöÄ Alternative Complete Startup:
#    docker compose -f docker-compose.local.yml --profile full up -d
#    ‚Ü≥ Starts ALL services including gateway (same as above)
#
# üéØ Core services only (no gateway):
#    docker compose -f docker-compose.local.yml --profile core up -d
#    ‚Ü≥ Starts: postgres, redis, nats, meilisearch, clickhouse, fechatter-server, analytics-server, notify-server, bot-server
#
# üîß Infrastructure only:
#    docker compose -f docker-compose.local.yml --profile infrastructure up -d
#    ‚Ü≥ Starts: postgres, redis, nats, meilisearch, clickhouse
#
# ‚ö° All-in-One service (alternative approach):
#    BOT_ENABLED=true GATEWAY_ENABLED=true docker compose -f docker-compose.local.yml --profile allinone up -d
#    ‚Ü≥ Single container with supervisor managing all services
#
# üîÑ Rebuild after code changes:
#    ./build-cross.sh --profile release
#    docker compose -f docker-compose.local.yml build --no-cache
#    docker compose -f docker-compose.local.yml --profile gateway up -d
#
# üõë Stop all services:
#    docker compose -f docker-compose.local.yml down
#
# üìù Service URLs (after startup):
#    üåê Gateway (API Entry):  http://localhost:8080 
#    üéØ Main Server:          http://localhost:6688
#    üìä Analytics:            http://localhost:6690  
#    üì£ Notifications:        http://localhost:6687
#    ü§ñ Bot Service:          http://localhost:6686
#    üóÑÔ∏è  Database:             postgresql://fechatter:fechatter_password@localhost:5432/fechatter
#    üì¶ Redis:                redis://:fechatter_redis_pass@localhost:6379
#    üîç Search:               http://localhost:7700
#    üìà ClickHouse:           http://localhost:8123
#
# ============================================================================